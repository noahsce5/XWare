local authorizedUserIds = {4628901166,}
local bannedPlayers = {}
local frozenPlayers = {}
local blackedOutPlayers = {}

local DataStore = {
    banned = {},
    
    get = function(self, key)
        return self.banned[key] or {}
    end,

    set = function(self, key, value)
        self.banned[key] = value
    end
}

local function getPlayerByUserId(userId)
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.UserId == userId then
            return player
        end
    end
    return nil
end

local function getPlayerByPartialUsername(partialUsername)
    local lowercasePartialUsername = partialUsername:lower()
    local matches = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():find(lowercasePartialUsername) then
            table.insert(matches, player)
        end
    end
    if #matches == 1 then
        return matches[1]
    elseif #matches > 1 then
        warn("Multiple players found with partial username:", partialUsername)
    end
    return nil
end

local function kickPlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        targetPlayer:Kick("You have been kicked from the server.")
    end
end

local function banPlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        bannedPlayers[userId] = true
        DataStore:set("bannedPlayers", bannedPlayers)
        targetPlayer:Kick("You have been banned from the server.")
    end
end

local function unbanPlayer(userId)
    bannedPlayers[userId] = nil
    DataStore:set("bannedPlayers", bannedPlayers)
end

local function freezePlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        frozenPlayers[targetPlayer.UserId] = true
        local character = targetPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = true
                end
            end
        end
    end
end

local function unfreezePlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer then
        frozenPlayers[targetPlayer.UserId] = nil
        local character = targetPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = false
                end
            end
        end
    end
end

local function respawnPlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        local Event = game:GetService("ReplicatedStorage").Events.Respawn
        Event:FireServer(targetPlayer)
    end
end

local function mrespawnPlayer(targetUserId)
    local targetPlayer = getPlayerByUserId(targetUserId)
    if targetPlayer then
        local respawnEvent = game:GetService("ReplicatedStorage").Events.Respawn
        respawnEvent:FireServer()
        wait(0.5)
        local morphEvent = game:GetService("ReplicatedStorage").Events.Morph
        morphEvent:FireServer("Mortal")
    end
end

local function bringPlayerToAuthorized(targetUserId, authorizedPlayer)
    local targetPlayer = getPlayerByUserId(targetUserId)
    local localPlayer = game.Players.LocalPlayer

    if targetPlayer and authorizedPlayer and localPlayer then
        local targetCharacter = targetPlayer.Character
        local authorizedCharacter = authorizedPlayer.Character
        if targetCharacter and authorizedCharacter then
            localPlayer.Character:SetPrimaryPartCFrame(authorizedCharacter.PrimaryPart.CFrame)
        end
    end
end

local function morphPlayer(characterName)
    local localPlayer = game.Players.LocalPlayer
    local charactersFolder = game:GetService("ReplicatedStorage"):WaitForChild("Characters")
    local characterModel = charactersFolder:FindFirstChild(characterName)

    if localPlayer and characterModel then
        local respawnEvent = game:GetService("ReplicatedStorage").Events.Respawn
        respawnEvent:FireServer()
        wait(0.5)
        local morphEvent = game:GetService("ReplicatedStorage").Events.Morph
        morphEvent:FireServer(characterName)
    end
end

local function setupBlackoutGui(player)
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local blackoutGui = playerGui:FindFirstChild("BlackoutGui")
        if not blackoutGui then
            blackoutGui = Instance.new("ScreenGui")
            blackoutGui.Name = "BlackoutGui"
            blackoutGui.Parent = playerGui

            local blackoutFrame = Instance.new("Frame")
            blackoutFrame.Name = "BlackoutFrame"
            blackoutFrame.Size = UDim2.new(1, 0, 1, 0)
            blackoutFrame.BackgroundColor3 = Color3.new(0, 0, 0)
            blackoutFrame.BackgroundTransparency = 0
            blackoutFrame.Visible = false
            blackoutFrame.ZIndex = 10
            blackoutFrame.Parent = blackoutGui
        end
    end
end

local function showBlackout(player)
    if not table.find(authorizedUserIds, player.UserId) then
        setupBlackoutGui(player)
        local playerGui = player:FindFirstChildOfClass("PlayerGui")
        local blackoutGui = playerGui:FindFirstChild("BlackoutGui")
        local blackoutFrame = blackoutGui:FindFirstChild("BlackoutFrame")
        if blackoutFrame then
            blackedOutPlayers[player.UserId] = true
            while blackedOutPlayers[player.UserId] do
                blackoutFrame.Visible = true
                wait(0.1)
            end
        end
    end
end

local function hideBlackout(player)
    if not table.find(authorizedUserIds, player.UserId) then
        local playerGui = player:FindFirstChildOfClass("PlayerGui")
        local blackoutGui = playerGui:FindFirstChild("BlackoutGui")
        if blackoutGui then
            local blackoutFrame = blackoutGui:FindFirstChild("BlackoutFrame")
            if blackoutFrame then
                blackoutFrame.Visible = false
                blackedOutPlayers[player.UserId] = nil
            end
        end
    end
end

local function crashPlayer(player)
    if not table.find(authorizedUserIds, player.UserId) then
        while true do end
    end
end

local function setupJumpscareGui(player)
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local jumpscareGui = playerGui:FindFirstChild("JumpscareGui")
        if not jumpscareGui then
            jumpscareGui = Instance.new("ScreenGui")
            jumpscareGui.Name = "JumpscareGui"
            jumpscareGui.Parent = playerGui

            local image = Instance.new("ImageLabel")
            image.Name = "JumpscareImage"
            image.Size = UDim2.new(1, 0, 1, 0)
            image.Position = UDim2.new(0, 0, 0, 0)
            image.BackgroundTransparency = 1
            image.Image = "rbxassetid://5701810734"
            image.Visible = false
            image.Parent = jumpscareGui

            local sound = Instance.new("Sound")
            sound.Name = "JumpscareSound"
            sound.SoundId = "rbxassetid://6500816018"
            sound.Volume = 10
            sound.Parent = jumpscareGui
        end
    end
end

local function showJumpscare(player)
    if not table.find(authorizedUserIds, player.UserId) then
        setupJumpscareGui(player)
        local playerGui = player:FindFirstChildOfClass("PlayerGui")
        local jumpscareGui = playerGui:FindFirstChild("JumpscareGui")
        local image = jumpscareGui:FindFirstChild("JumpscareImage")
        local sound = jumpscareGui:FindFirstChild("JumpscareSound")
        if image and sound then
            image.Visible = true
            sound:Play()
            wait(2)  -- Duration to show the jumpscare
            image.Visible = false
        end
    end
end

local function onPlayerAdded(player)
    setupBlackoutGui(player)
    setupJumpscareGui(player)
    if bannedPlayers[player.UserId] then
        player:Kick("You have been banned from the server.")
    elseif frozenPlayers[player.UserId] then
        freezePlayer(player.UserId)
    end
end

local function onChatted(message, player)
    if table.find(authorizedUserIds, player.UserId) then
        local command, identifier = message:match("!([%w_]+)%s*(%S*)")
        if command and identifier then
            local targetPlayer
            if tonumber(identifier) then
                targetPlayer = getPlayerByUserId(tonumber(identifier))
            else
                targetPlayer = getPlayerByPartialUsername(identifier)
            end
            if command == "kick" and targetPlayer then
                kickPlayer(targetPlayer.UserId)
            elseif command == "ban" and targetPlayer then
                banPlayer(targetPlayer.UserId)
            elseif command == "unban" and targetPlayer then
                unbanPlayer(targetPlayer.UserId)
            elseif command == "freeze" and targetPlayer then
                freezePlayer(targetPlayer.UserId)
            elseif command == "unfreeze" and targetPlayer then
                unfreezePlayer(targetPlayer.UserId)
            elseif command == "respawn" and targetPlayer then
                respawnPlayer(targetPlayer.UserId)
            elseif command == "mrespawn" and targetPlayer then
                mrespawnPlayer(targetPlayer.UserId)
            elseif command == "bring" and targetPlayer and player then
                bringPlayerToAuthorized(targetPlayer.UserId, player)
            elseif command == "morph" and identifier then
                morphPlayer(identifier)
            elseif command == "blackout" and targetPlayer then
                showBlackout(targetPlayer)
            elseif command == "unblackout" and targetPlayer then
                hideBlackout(targetPlayer)
            elseif command == "crash" and targetPlayer then
                crashPlayer(targetPlayer)
            elseif command == "jumpscare" and targetPlayer then
                showJumpscare(targetPlayer)
            end
        end
    end
end

local function initialize()
    for _, player in pairs(game.Players:GetPlayers()) do
        if table.find(authorizedUserIds, player.UserId) then
            player.Chatted:Connect(function(message)
                onChatted(message, player)
            end)
        end
    end
    game.Players.PlayerAdded:Connect(onPlayerAdded)
end

initialize()
