local authorizedUserIds = {4628901166}
local bannedPlayers = {}
local frozenPlayers = {}
local blackedOutPlayers = {}

local DataStore = {
    banned = {},
    
    get = function(self, key)
        return self.banned[key] or {}
    end,

    set = function(self, key, value)
        self.banned[key] = value
    end
}

local function getPlayerByUserId(userId)
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.UserId == userId then
            return player
        end
    end
    return nil
end

local function getPlayerByPartialUsername(partialUsername)
    local lowercasePartialUsername = partialUsername:lower()
    local matches = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():find(lowercasePartialUsername) then
            table.insert(matches, player)
        end
    end
    if #matches == 1 then
        return matches[1]
    elseif #matches > 1 then
        warn("Multiple players found with partial username:", partialUsername)
    end
    return nil
end

local function kickPlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        targetPlayer:Kick("You have been kicked from the server.")
    end
end

local function banPlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        bannedPlayers[userId] = true
        DataStore:set("bannedPlayers", bannedPlayers)
        targetPlayer:Kick("You have been banned from the server.")
    end
end

local function unbanPlayer(userId)
    bannedPlayers[userId] = nil
    DataStore:set("bannedPlayers", bannedPlayers)
end

local function freezePlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        frozenPlayers[targetPlayer.UserId] = true
        local character = targetPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 0
                humanoid.JumpPower = 0
                humanoid.PlatformStand = true
                humanoid.AutoRotate = false
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
                character:WaitForChild("HumanoidRootPart").Velocity = Vector3.new(0, 0, 0)
            end
        end
    end
end

local function unfreezePlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer then
        frozenPlayers[targetPlayer.UserId] = nil
        local character = targetPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
                humanoid.JumpPower = 50
                humanoid.PlatformStand = false
                humanoid.AutoRotate = true
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
            end
        end
    end
end

local function respawnPlayer(userId)
    local targetPlayer = getPlayerByUserId(userId)
    if targetPlayer and not table.find(authorizedUserIds, targetPlayer.UserId) then
        local Event = game:GetService("ReplicatedStorage").Events.Respawn
        Event:FireServer(targetPlayer)
    end
end

local function mrespawnPlayer(targetUserId)
    local targetPlayer = getPlayerByUserId(targetUserId)
    if targetPlayer then
        local respawnEvent = game:GetService("ReplicatedStorage").Events.Respawn
        respawnEvent:FireServer()
        wait(0.5)
        local morphEvent = game:GetService("ReplicatedStorage").Events.Morph
        morphEvent:FireServer("Mortal")
    end
end

local function bringPlayerToAuthorized(targetUserId, authorizedPlayer)
    local targetPlayer = getPlayerByUserId(targetUserId)
    local localPlayer = game.Players.LocalPlayer

    if targetPlayer and authorizedPlayer and localPlayer then
        local targetCharacter = targetPlayer.Character
        local authorizedCharacter = authorizedPlayer.Character
        if targetCharacter and authorizedCharacter then
            localPlayer.Character:SetPrimaryPartCFrame(authorizedCharacter.PrimaryPart.CFrame)
        end
    end
end

local function morphPlayer(characterName)
    local localPlayer = game.Players.LocalPlayer
    local charactersFolder = game:GetService("ReplicatedStorage"):WaitForChild("Characters")
    local characterModel = charactersFolder:FindFirstChild(characterName)

    if localPlayer and characterModel then
        local respawnEvent = game:GetService("ReplicatedStorage").Events.Respawn
        respawnEvent:FireServer()
        wait(0.5)
        local morphEvent = game:GetService("ReplicatedStorage").Events.Morph
        morphEvent:FireServer(characterName)
    end
end

local function setupBlackoutGui(player)
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        local blackoutGui = playerGui:FindFirstChild("BlackoutGui")
        if not blackoutGui then
            blackoutGui = Instance.new("ScreenGui")
            blackoutGui.Name = "BlackoutGui"
            blackoutGui.Parent = playerGui

            local blackoutFrame = Instance.new("Frame")
            blackoutFrame.Name = "BlackoutFrame"
            blackoutFrame.Size = UDim2.new(1, 0, 1, 0)
            blackoutFrame.BackgroundColor3 = Color3.new(0, 0, 0)
            blackoutFrame.BackgroundTransparency = 0
            blackoutFrame.Visible = false
            blackoutFrame.ZIndex = 10
            blackoutFrame.Parent = blackoutGui
        end
    end
end

local function showBlackout()
    local player = game.Players.LocalPlayer
    if player then
        setupBlackoutGui(player)
        local playerGui = player:FindFirstChildOfClass("PlayerGui")
        local blackoutGui = playerGui:FindFirstChild("BlackoutGui")
        local blackoutFrame = blackoutGui:FindFirstChild("BlackoutFrame")
        if blackoutFrame then
            blackedOutPlayers[player.UserId] = true
            while blackedOutPlayers[player.UserId] do
                blackoutFrame.Visible = true
                wait(0.1)
            end
        end
    end
end

local function hideBlackout()
    local player = game.Players.LocalPlayer
    if player then
        local playerGui = player:FindFirstChildOfClass("PlayerGui")
        local blackoutGui = playerGui:FindFirstChild("BlackoutGui")
        if blackoutGui then
            local blackoutFrame = blackoutGui:FindFirstChild("BlackoutFrame")
            if blackoutFrame then
                blackoutFrame.Visible = false
                blackedOutPlayers[player.UserId] = nil
            end
        end
    end
end

local function onPlayerAdded(player)
    setupBlackoutGui(player)
    if bannedPlayers[player.UserId] then
        player:Kick("You have been banned from the server.")
    elseif frozenPlayers[player.UserId] then
        freezePlayer(player.UserId)
    end
end

local function onChatted(message, player)
    if table.find(authorizedUserIds, player.UserId) then
        local command, identifier = message:match("!([%w_]+)%s*(%S*)")
        if command and identifier then
            local targetPlayer
            if tonumber(identifier) then
                local targetUserId = tonumber(identifier)
                targetPlayer = getPlayerByUserId(targetUserId)
            else
                targetPlayer = getPlayerByPartialUsername(identifier)
            end

            if command == "kick" then
                if targetPlayer then
                    kickPlayer(targetPlayer.UserId)
                end
            elseif command == "ban" then
                if targetPlayer then
                    banPlayer(targetPlayer.UserId)
                end
            elseif command == "unban" then
                if targetPlayer then
                    unbanPlayer(targetPlayer.UserId)
                end
            elseif command == "freeze" then
                if targetPlayer then
                    freezePlayer(targetPlayer.UserId)
                end
            elseif command == "unfreeze" then
                if targetPlayer then
                    unfreezePlayer(targetPlayer.UserId)
                end
            elseif command == "respawn" then
                if targetPlayer then
                    respawnPlayer(targetPlayer.UserId)
                end
            elseif command == "bring" then
                if targetPlayer then
                    bringPlayerToAuthorized(targetPlayer.UserId, player)
                end
            elseif command == "morph" then
                local _, characterName = message:match("!morph%s+(%S+)%s+(%S+)")
                if characterName then
                    morphPlayer(characterName)
                end
            elseif command == "mrespawn" then
                if targetPlayer then
                    mrespawnPlayer(targetPlayer.UserId)
                end
            elseif command == "blackout" then
                if targetPlayer then
                    blackedOutPlayers[targetPlayer.UserId] = true
                    showBlackout()
                end
            elseif command == "unblackout" then
                if targetPlayer then
                    blackedOutPlayers[targetPlayer.UserId] = nil
                    hideBlackout()
                end
            end
        end
    end
end

local function initialize()
    for _, player in pairs(game.Players:GetPlayers()) do
        onPlayerAdded(player)
        if table.find(authorizedUserIds, player.UserId) then
            player.Chatted:Connect(function(message)
                onChatted(message, player)
            end)
        end
    end
    print("Commands Successful")
end

game.Players.PlayerAdded:Connect(function(player)
    onPlayerAdded(player)
    if table.find(authorizedUserIds, player.UserId) then
        player.Chatted:Connect(function(message)
            onChatted(message, player)
        end)
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    if table.find(authorizedUserIds, player.UserId) then
        bannedPlayers = DataStore:get("bannedPlayers")
        frozenPlayers = {}
    end
end)

game.Players.LocalPlayer.Chatted:Connect(function(message)
    onChatted(message, game.Players.LocalPlayer)
end)

initialize()
