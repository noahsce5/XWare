local Library1 = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library1.CreateLib("Key system","DarkTheme")
local MainT = Window:NewTab("Main")
local Main = MainT:NewSection("Main")

Main:NewTextBox('Enter key', 'Enter the key here to gain access to the script', function(key)
    _G.enteredKey = key
end)
Main:NewButton('Check key', '', function()
    if _G.enteredKey == 'VklQ7U3KY' then
        loadMain()
    end
end)

function loadMain()
local tar = game.workspace:FindFirstChild("XWareValues")
if tar then
    tar:Destroy()
end
local tart = game.workspace:FindFirstChild("Custom Animations")
if tart then
    tart:Destroy()
end
local XWareValues = Instance.new("Folder",workspace)
XWareValues.Name = "XWareValues"
local ActiveKey = Instance.new("StringValue",workspace.XWareValues)
ActiveKey.Name = "Keys"
--starter
local Animation_Folder = Instance.new("Folder")
Animation_Folder.Parent = workspace
Animation_Folder.Name = "Custom Animations"
--Kolmove Animation
local AnimationId = "6112652562"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "kolmove"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["kolmove"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--masspain Animation
local AnimationId = "5414156941"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "masspain"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["masspain"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Push Animation
local AnimationId = "5412263593"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "push"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["push"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)
--Delfan Animatio--]]
local AnimationId = "5815383220"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "delfan"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["delfan"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Fire Circle Animation
local AnimationId = "5414902308"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "fire circle"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["fire circle"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Motus Animation
local AnimationId = "4756402298"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "motus"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["motus"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Self Siphon Animation
local AnimationId = "4786138659"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "Self Siphon"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["Self Siphon"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Siphon Energy
local AnimationId = "4756427378"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "Siphon"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["Siphon"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Ah sha lana
local AnimationId = "5422859012"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "Ah sha lana"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["Ah sha lana"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
local Player = game.Players.LocalPlayer
local Character = Player.Character
local hum = Character.HumanoidRootPart
local Position = hum.CFrame
local Rep = game:GetService("ReplicatedStorage")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Gui = Library.CreateLib("X-Ware | Josiah's GUI", "BloodTheme")
local Binds = Gui:NewTab("Keybinds");
local WB = Binds:NewSection("Witch Keybinds")
local Witch = Gui:NewTab("Witches");
local W = Witch:NewSection("Witches")
local Vamp = Gui:NewTab("Vamp/Wolf");
local V = Vamp:NewSection("VAMPIRE")	
local Misc = Gui:NewTab("Misc");
local M = Misc:NewSection("Misc")
local Teleports = Gui:NewTab("Teleports");
local T = Teleports:NewSection("Teleports")
local Custom = Gui:NewTab("Custom Spells");
local Cu = Custom:NewSection("Custom Spells")
local Character = Gui:NewTab("Character Spawn");
local CS = Character:NewSection("Auto Steal Characters")
local Actions = Gui:NewTab("Custom Character");
local CA = Actions:NewSection("Custom Abilities")
local Paid = Gui:NewTab("Abuse Char");
local P = Paid:NewSection("Sybil Section")
local Gui = Gui:NewTab("Gui");
local G = Gui:NewSection("Gui")
V:NewToggle("Vampire Immortality", "", function(I)
    _G.IMMORTAL = I

    while _G.IMMORTAL == true  do
        local args = {
            [1] = false
        }

        game:GetService("Players").LocalPlayer.Character.BurnInSun.Control:FireServer(unpack(args))
        wait()
    end
end)
V:NewToggle("Kill All", "", function(SPAM)
    _G.HealSpam = SPAM
    while _G.HealSpam == true do
        local Plr = game.Players.LocalPlayer
        for i, Player in pairs (game.Players:GetPlayers()) do

            if Player.Character ~= nil and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 999999999 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local args = {
                        [1] = "Heal",
                        [2] = {
                            [1] = Target
                        }
                    }

                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
        wait()
    end
end)
V:NewToggle("Spam Punch All", "", function(PU)
    _G.PUNCH = PU
    while _G.PUNCH == true do
        local Plr = game.Players.LocalPlayer
        for i, Player in pairs (game.Players:GetPlayers()) do
        
            if Player.Character ~= nil and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 9999999999999999 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local args = {
                        [1] = "Punch",
                        [2] = {
                            [1] = false,
                            [2] = Target.Humanoid
                        }
                    }
        
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
        wait()
    end
end)
V:NewButton("Vampire Eyes", "", function()
local args = {
    [1] = "ChangeFace"
}

game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
end)
V:NewButton("Head Decapitate(Y)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.Y
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = "Decapitate",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Heart Rip(B)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.B
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = "RipOutHeart",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Dont Burn(Vampire)", "", function()

	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid

	local Bite = Character:WaitForChild("Ring")
	Bite.Active.Value = true

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Dont Burn loaded!";
		Text = "Made by tisnoah#0."
	})

end)
V:NewButton("Super Feed(C)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.C
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = "Feed",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Super Heal(E)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.E
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = "Heal",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Wolf Bite(T)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.T
    
    local function isKeybindDown()
        return UserInputService:IsKeyDown(keybind)
    end
    
    local function Input(input, gameProcessedEvent)
        if isKeybindDown() then
            local localPlayer = game.Players.LocalPlayer
            local mouse = localPlayer:GetMouse()
            if mouse.Target and mouse.Target.Parent then
                local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if targetPlayer then
                    local user = targetPlayer.Character
                    if user then
                        local args = {
                            "Bite",
                            {
                                [1] = false,
                                [2] = user
                            }
                        }
                        for _ = 1, 10 do
                            game:GetService("ReplicatedStorage").Events.Werewolf:FireServer(unpack(args))
                            print(targetPlayer.Name)
                        end
                    end
                end
            end
        end
    end
    
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Feed On Yourself", "", function()
   local args = {
      [1] = "Feed",
      [2] = {
          [1] = game:GetService("Players").LocalPlayer.Character
      }
  }
  
  game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
  wait(0.5)
  local args = {
      [1] = "Heal",
      [2] = {
          [1] = game:GetService("Players").LocalPlayer.Character
      }
  }
  
  game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
end)
V:NewButton("Snap All", "", function() 
    local plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= plr then
            local mag = (Player.Character.UpperTorso.Position - plr.Character.UpperTorso.Position).magnitude
            if mag < 9999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "NeckSnap",
                    [2] = {
                        [1] = Target
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
            end
        end
    end
end) 
V:NewButton("Wolf Bite All", "", function() 
    local plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= plr then
            local mag = (Player.Character.UpperTorso.Position - plr.Character.UpperTorso.Position).magnitude
            if mag < 9999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "Bite",
                    [2] = {
                        [1] = false,
                        [2] = Target
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Werewolf:FireServer(unpack(args))
            end
        end
    end
end) 
V:NewButton("Remove Wolf-Ven", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid

	local Bite = Character:WaitForChild("WerewolfVenom")
	Bite:Destroy()
end)

V:NewButton("Compulsion", "To Compell Originals use a Original", function()
	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.G

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then

					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "GiveStake"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)


	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.C

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end

	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "RingOff"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.J

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "Follow"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end


	UserInputService.InputBegan:Connect(Input)


local keybind = Enum.KeyCode.R

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Punch(player)
    local args = {
        [1] = "Start",
        [2] = {
            [1] = game:GetService("Workspace").Live[player.Name]
        }
    }

    for _ = 1, 13 do 
        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

        local A_1 = "StandStill"
        local A_2 = {
            [1] = game:GetService("Workspace").Live[player.Name]
        }
        local Event = game:GetService("ReplicatedStorage").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Punch(targetPlayer)
            end
        end
    end
end

UserInputService.InputBegan:Connect(Input)

local UserInputService = game:GetService("UserInputService")

local keybind = Enum.KeyCode.H

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Punch(player)
    local args = {
        [1] = "Start",
        [2] = {
            [1] = game:GetService("Workspace").Live[player.Name]
        }
    }

    for _ = 1, 13 do 
        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

        local A_1 = "AllowMove"
        local A_2 = {
            [1] = game:GetService("Workspace").Live[player.Name]
        }
        local Event = game:GetService("ReplicatedStorage").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Punch(targetPlayer)
            end
        end
    end
end

UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.X

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "PunchSelf"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.N

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "DontPunch"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(Input)
	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.I

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "AllowPunch"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(Input)
	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.M

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "Sleep"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)
	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.O

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "NoMagic"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)


	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.A

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "AllowMagic"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)
	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.T

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "WerewolfTurn"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)


	local keybind = Enum.KeyCode.Q

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

end)
V:NewLabel("WearWolf")
V:NewButton("Turn", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local function getPlayer()
        local cam = workspace.CurrentCamera
        local userInput = game:GetService("UserInputService")
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        local playerCharacters = {}

        for _, player in pairs(Players:GetPlayers()) do
            table.insert(playerCharacters, player.Character)
        end

        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = playerCharacters
        raycastParams.IgnoreWater = true

        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, player in pairs(Players:GetPlayers()) do
                if raycastResult.Instance:IsDescendantOf(player.Character) then
                    return player
                end
            end
        end
        return nil  -- Changed to return nil instead of false for clarity
    end

    local function turn()
        local player = getPlayer()
        if player then
            local args = {
                [1] = "Turn",
                [2] = {
                    [1] = player -- Pass the player object directly
                }
            }
            ReplicatedStorage.Events.Werewolf:FireServer(unpack(args))
        end
    end

    turn()
end)
V:NewButton("Turn Back", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local function getPlayer()
        local cam = workspace.CurrentCamera
        local userInput = game:GetService("UserInputService")
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        local playerCharacters = {}

        for _, player in pairs(Players:GetPlayers()) do
            table.insert(playerCharacters, player.Character)
        end

        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = playerCharacters
        raycastParams.IgnoreWater = true

        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, player in pairs(Players:GetPlayers()) do
                if raycastResult.Instance:IsDescendantOf(player.Character) then
                    return player
                end
            end
        end
        return false
    end

    local function turnBack()
        local player = getPlayer()
        if player then
            local args = {
                [1] = "Turn",
                [2] = {
                    [1] = "turnBack"  -- Corrected the action to "turnBack" instead of "Turn"
                }
            }
            ReplicatedStorage.Events.Werewolf:FireServer(unpack(args))
        end
    end

    turnBack()
end)
V:NewButton("Snap(V)", "", function()
   local UserInputService = game:GetService("UserInputService")
   local keybind = Enum.KeyCode.V
   local function iskeybinddown()
       return UserInputService:IsKeyDown(keybind)
   end
   local function Input(input, gameProcessedEvent)
       local localplr = game.Players.LocalPlayer
       local mouse = localplr:GetMouse()
       if iskeybinddown() then
           if mouse.Target and mouse.Target.Parent then
               plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
               if plr ~= nil then
                   local user = game.Players[plr.Name].Character
                   local args = {
                     [1] = "NeckSnap",
                     [2] = {
                         [1] = user
                     }
                 }
                 
                 game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))                 
                   print(plr.Name)
               end
           end
       end
   end
   UserInputService.InputBegan:Connect(Input)
end)
W:NewToggle("LoopDeleteChannel", "", function(toggle)
	_G.DeleteChannel = toggle
	while _G.DeleteChannel == true do
		local Player = game.Players.LocalPlayer
		local Character = Player.Character

		local Channel = Character:WaitForChild("Channeling")
		Channel:Destroy()
		wait()
	end
end)
W:NewToggle("Spam Channel Whole Server", "", function(cha)
   _G.channel = cha
   while _G.channel == true do
      local Plr = game.Players.LocalPlayer
      for i, Player in pairs (game.Players:GetPlayers()) do
         if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
               local Target = Player.Character or Player.CharacterAdded:Wait()

               local args = {
                  [1] = "Magic",
                  [2] = {
                     [1] = "requestChanneling",
                     [2] = Target
                  }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
         end
      end
      wait()
   end
end)
W:NewToggle("Push All", "", function(PushAll)
	_G.PushAll = PushAll
	local AnimationId = "5422859012"
	local AnimationId = "5422859012"
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://"..AnimationId
	local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k:Play()
	k:AdjustSpeed(1)
	wait(2)
	while _G.PushAll == true do
	local Plr = game.Players.LocalPlayer
		for i, Player in pairs (game.Players:GetPlayers()) do
	
			if Player.Character ~= nil and Player ~= Plr then
				local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
				if mag < 999999 then
					local Target = Player.Character or Player.CharacterAdded:Wait()
	
					local A_1 = "Push"
					local A_2 = 
						{
							[1] = Target
						}
					local Event = game:GetService("ReplicatedStorage").Events.Witch
					Event:FireServer(A_1, A_2)
	
				end
			end
		end
		wait()
	end
end)
W:NewTextBox("LoopChannel", "", function(plr)
    local Players = game:GetService("Players")
    local msg = plr
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end
W:NewTextBox("Auto Accept Channel", "", function(txt2)
        while true do
       local args = {
           [1] = "Channel",
           [2] = {
               [1] = true,
               [2] = game.Players[(txt2)].Character
           }
       }
       
       game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
       wait()
       local args = {
           [1] = "Channel",
           [2] = {
               [1] = true,
               [2] = game.Players[(txt2)].Character
           }
       }
       
       game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
       wait()
       end
           end)

    local player = findPlayer(msg)
    print(player)

	_G.CHANNEL = true 
	    while _G.CHANNEL == true do
	    local args = {
		[1] = "Channel",
		[2] = {
		    [1] = true,
		    [2] = player.Character
		}
	    }
	    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

	    local args = {
		[1] = "Magic",
		[2] = {
		    [1] = "requestChanneling",
		    [2] = player.Character
		}
	    }
	    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
	    wait()
	end
end)
--W:NewButton("UnragdollKeybind(z)", "", function()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local bind = "z" -- Declare 'bind' locally
    mouse.KeyDown:Connect(function(key)
        if IsTyping then return end
        if key == bind then
            local args = {
                [1] = 1
            }
            game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(unpack(args))
        end
    end)
--W:NewButton("All Keybinds", "", function()
    print("a")
    local state = true
    if state == true then
        local bind = 'g'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
            end
            if x ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "PainInflict",
                        [2] = {
                            [1] = player.Character,
                            [2] = false
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))                                                                
                end
            end
        end)
     end

        local bind = 'r'

local function getPlayer()
    local userInput = game:GetService("UserInputService")
    local cam = workspace.CurrentCamera
    local mousePos = userInput:GetMouseLocation()
    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
    local players = {}
    for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
        players[#players + 1] = x.Character
    end
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
    raycastParams.FilterDescendantsInstances = players
    raycastParams.IgnoreWater = true
    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
    if raycastResult then
        for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                continue 
            end
            if x ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end

local function Set(list)
    local set = {}
    for _, l in ipairs(list) do
        if l then
            set[l] = true
        end
    end
    return set
end

game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
    if IsTyping then return end
    if key == bind then
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Push",
                [2] = {
                    [1] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
           
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local animation = Instance.new("Animation")
                animation.AnimationId = "rbxassetid://5422859012"
                local animationTrack = humanoid:LoadAnimation(animation)
                animationTrack:Play()
            end
        end
    end
end)
        local bind = 'c'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
            end
            if x ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "FireSpell",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
  local bind = 'x'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Freeze",
                        [2] = {
                            [1] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
                end
            end
        end)
  local bind = 'n'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "NoFire",
                        [2] = {
                            [1] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
                end
            end
        end)
        local bind = 't'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "BreakLeg",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'u'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "SnapNeck",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'l'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "DisableRing",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																							
                end
            end
        end)
        local bind = 'k'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "EnableRing",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
                                                                                        
                end
            end
        end)
        local bind = 'b'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
            end
            if x ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "TelekineticHeart",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'q'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                local args = {
                   [1] = "Magic",
                   [2] = {
                       [1] = "FireCircle",
                       [2] = player.Character
                   }
               }
               
               game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))                                                                       
                end
            end
        end)
       local function getPlayer()
    local userInput = game:GetService("UserInputService")
    local cam = workspace.CurrentCamera
    local mousePos = userInput:GetMouseLocation()
    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
    local players = {}
    for _, x in pairs(game:GetService('Players'):GetPlayers()) do
        players[#players + 1] = x.Character
    end
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
    raycastParams.FilterDescendantsInstances = players
    raycastParams.IgnoreWater = true
    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
    if raycastResult then
        for _, x in pairs(game:GetService('Players'):GetPlayers()) do
            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                continue 
            end
            return x
        end
    end
    return false
end

local function bindFunction(bind, action)
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if IsTyping then return end
        if key == bind then
            local player = getPlayer()
            if player then
                action(player)
            else
                print("Player not found.")
            end
        end
    end)
end

	local bind = 'y'
	local function getPlayer()
	local userInput = game:GetService("UserInputService")
	local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local A_1 = "Magic"
                local A_2 = 
                {
                    [1] = "Explosion",
                    [2] = Mouse.Hit.p
                }
                local Event = game:GetService("ReplicatedStorage").Events.Witch
                Event:FireServer(A_1, A_2)																				
            end
        end)

        local bind = 'p'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local args = {
                    [1] = "Magic",
                    [2] = {
                    [1] = "SnapAll"
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																					
            end
        end)
W:NewButton("Immortality", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Workspace = game:GetService("Workspace")
    local LocalPlayer = Players.LocalPlayer

    local animationId = "rbxassetid://9237375399"
    local debounce = false

    local function playAnimation(character, animationId)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = animationId

        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()
            animationTrack.Looped = false
        end
    end

    local function applyVervainBody()
        if not LocalPlayer.Character:FindFirstChild("VervainBody") and Workspace.Live:FindFirstChild(LocalPlayer.Name) then
            local A_1 = "Magic"
            local A_2 = { [1] = "VervainBody", [2] = LocalPlayer.Character }
            local Event = ReplicatedStorage.Events.Witch
            Event:FireServer(A_1, A_2)
        end
    end

    local function destroyImmortalityComm()
        local immortalityFolder = Workspace.Live:FindFirstChild(LocalPlayer.Name) and Workspace.Live[LocalPlayer.Name]:FindFirstChild("Immortality")
        if immortalityFolder and immortalityFolder:FindFirstChild("Comm") then
            immortalityFolder.Comm:Destroy()
        end
    end

    local function saySpell(spell)
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spell, "All")
    end

    local function onSpellCast()
        if not debounce then
            debounce = true
            saySpell("Elysium's Grace!")
            playAnimation(LocalPlayer.Character, animationId)
            debounce = false
        end
    end

    coroutine.wrap(function()
        while true do
            applyVervainBody()
            wait(10)
        end
    end)()

    onSpellCast()
end)
W:NewButton("See Other Side", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local animationId = "rbxassetid://5845089952"

    local function playAnimation(character, animationId, callback)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = animationId

        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()

            animationTrack.Stopped:Connect(callback)
        end
    end

    local function createSeeGhostsFolder()
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local folder = Instance.new("Folder")
        folder.Name = "SeeGhosts"
        folder.Parent = character
    end

    local function onChatMessage(player, message)
        if player == Players.LocalPlayer and message == "Spectra Vision" then
            playAnimation(LocalPlayer.Character, animationId, createSeeGhostsFolder)
        end
    end

    ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(data)
        local speaker = data.FromSpeaker
        local message = data.Message
        local player = Players:FindFirstChild(speaker)
        if player and message then
            onChatMessage(player, message)
        end
    end)

    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Spectra Vision", "All")
end)
W:NewButton("Vervain Body Loop", "", function()
    local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Live = game.Workspace.Live
	local RunService = game:GetService("RunService")
	local Debounce = false

	while task.wait(2) do
		if not game.Players.LocalPlayer.Character:FindFirstChild("VervainBody") and game.Workspace.Live:FindFirstChild(game.Players.LocalPlayer.Character.Name) then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "VervainBody",
					[2] = game.Players.LocalPlayer.Character
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)
		end
	end
end)
W:NewButton("Witch Animation", "", function()
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")
    local runAnim = Instance.new("Animation")
    runAnim.AnimationId = "rbxassetid://13599944537"
    runAnim.Name = "DemonRun"
    Instance.new("BoolValue", character).Name = "Wolf"
    runAnim.Parent = character.Immortality
    local walkAnim = character.Immortality.DemonWalk
    local runAnimation = character.Immortality:WaitForChild("DemonRun")
    local walkAnimation = character.Immortality:WaitForChild("DemonWalk")
    local runAnimationTrack = humanoid:LoadAnimation(runAnimation)
    local walkAnimationTrack = humanoid:LoadAnimation(walkAnimation)
    local currentAnimationTrack = nil
    while true do
        if character and humanoid then
            if humanoid.ragdoll.Value == false then
                if humanoid.WalkSpeed == 16 then
                    if currentAnimationTrack ~= walkAnimationTrack then
                        character.Animate.Disabled = true
                        if currentAnimationTrack then
                            currentAnimationTrack:Stop()
                        end
                        walkAnimationTrack:Play()
                        currentAnimationTrack = walkAnimationTrack
                    end
                elseif humanoid.WalkSpeed > 16 then
                    if humanoid.MoveDirection.Magnitude > 0 then
                        if currentAnimationTrack ~= runAnimationTrack then
                            character.Animate.Disabled = true
                            if currentAnimationTrack then
                                currentAnimationTrack:Stop()
                            end
                            runAnimationTrack:Play()
                            currentAnimationTrack = runAnimationTrack
                        end
                    end
                end
            else
                character.Animate.Disabled = false
                currentAnimationTrack = nil
            end
            if humanoid.MoveDirection.Magnitude == 0 and currentAnimationTrack == runAnimationTrack then
                currentAnimationTrack:Stop()
                walkAnimationTrack:Play()
                currentAnimationTrack = walkAnimationTrack
            end        
            if character:FindFirstChild("PainInfliction") then
                humanoid.HipHeight = 2
            else
                humanoid.HipHeight = 2.5
            end
        end
        task.wait()
    end
end)
W:NewButton("Protection", "", function()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")

    local Animation = Instance.new("Animation")
    Animation.AnimationId = "rbxassetid://5396696784"

    local runAnim = Instance.new("Animation")
    runAnim.AnimationId = "rbxassetid://13599944537"
    runAnim.Name = "DemonRun"
    runAnim.Parent = character.Immortality

    local runAnimationTrack = humanoid:LoadAnimation(runAnim)
    local walkAnim = character.Immortality.DemonWalk
    local walkAnimation = character.Immortality:WaitForChild("DemonWalk")
    local walkAnimationTrack = humanoid:LoadAnimation(walkAnimation)
    local currentAnimationTrack = nil

    local function playAnimation()
        local changeFaceArgs = {
            [1] = "ChangeFace"
        }
        game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(changeFaceArgs))

        local animator = humanoid:FindFirstChildOfClass("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end

        local animationTrack = animator:LoadAnimation(Animation)
        animationTrack:Play()
    end

    local function attackPlayers()
        local playersSetOnFire = {}
        local endTime = os.time() + 20
        while os.time() < endTime do
            local Plr = game.Players.LocalPlayer
            for _, Player in pairs(game.Players:GetPlayers()) do
                if Player.Character ~= nil and Player ~= Plr then
                    local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                    if mag < 10 then
                        local Target = Player.Character or Player.CharacterAdded:Wait()
                        
                        local punchArgs = {
                            [1] = "Punch",
                            [2] = {
                                [1] = false,
                                [2] = Target.Humanoid
                            }
                        }
                        game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(punchArgs))

                        if not playersSetOnFire[Player] then
                            playersSetOnFire[Player] = true
                            local fireArgs = {
                                [1] = "Magic",
                                [2] = {
                                    [1] = "FireSpell",
                                    [2] = Player.Character
                                }
                            }
                            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(fireArgs))
                        end

                        local channelingArgs = {
                            [1] = "Magic",
                            [2] = {
                                [1] = "requestChanneling",
                                [2] = Target
                            }
                        }
                        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(channelingArgs))
                    end
                end
            end
            wait(0.1)
        end
    end

    local function startAnimations()
        while true do
            if character and humanoid then
                if humanoid.ragdoll.Value == false then
                    if humanoid.WalkSpeed == 16 then
                        if currentAnimationTrack ~= walkAnimationTrack then
                            character.Animate.Disabled = true
                            if currentAnimationTrack then
                                currentAnimationTrack:Stop()
                            end
                            walkAnimationTrack:Play()
                            currentAnimationTrack = walkAnimationTrack
                        end
                    elseif humanoid.WalkSpeed > 16 then
                        if humanoid.MoveDirection.Magnitude > 0 then
                            if currentAnimationTrack ~= runAnimationTrack then
                                character.Animate.Disabled = true
                                if currentAnimationTrack then
                                    currentAnimationTrack:Stop()
                                end
                                runAnimationTrack:Play()
                                currentAnimationTrack = runAnimationTrack
                            end
                        end
                    end
                else
                    character.Animate.Disabled = false
                    currentAnimationTrack = nil
                end
                if humanoid.MoveDirection.Magnitude == 0 and currentAnimationTrack == runAnimationTrack then
                    currentAnimationTrack:Stop()
                    walkAnimationTrack:Play()
                    currentAnimationTrack = walkAnimationTrack
                end        
                if character:FindFirstChild("PainInfliction") then
                    humanoid.HipHeight = 2
                else
                    humanoid.HipHeight = 2.5
                end
            end
            task.wait()
        end
    end

    local function stopAfter20Seconds()
        wait(20)
        game:GetService("ReplicatedStorage").Events.Vampire:FireServer("ChangeFace")
        runAnimationTrack:Stop()
        walkAnimationTrack:Stop()
    end

    local mainCoroutine = coroutine.create(function()
        playAnimation()
        attackPlayers()
        startAnimations()
        stopAfter20Seconds()
    end)

    coroutine.resume(mainCoroutine)
end)
W:NewButton("Silence All", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "Silence",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Explode All", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "Explosion",
						[2] = Target.HumanoidRootPart.CFrame.p
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Delfan All", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "TelekineticHeart",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Sleep All", "", function()

	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "SleepSpell",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Channel All", "", function()
	local Plr = game.Players.LocalPlayer
	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

            local args = {
               [1] = "Magic",
               [2] = {
                   [1] = "requestChanneling",
                   [2] = Target
               }
           }
           
           game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
			end
		end
	end
end)
W:NewButton("Disable All Rings", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "DisableRing",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end
end)
W:NewButton("Freeze All", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "Freeze",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end
end)   
M:NewTextBox("CustomName", "", function(NAME)
	_G.auto_name = true
	while _G.auto_name == true do
		local args = {
			[1] = NAME
		}
		game:GetService("ReplicatedStorage").Events.FilterText:InvokeServer(unpack(args))
		wait()
	end
end)
M:NewTextBox("Player Anti Burn", "", function(playerName)
    local function antiBurn(character)
        local witch = game.ReplicatedStorage.Events.Witch
        while wait(1) do
            if _G.stop == true then
                return
            end
            if character.UpperTorso:FindFirstChild("Flames") then
                witch:FireServer("Magic", {"NoFire", character})
            end
        end
    end

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name:lower():find(playerName:lower()) then
            antiBurn(player.Character)
            return
        end
    end

    print("Player not found.")
end)
M:NewTextBox("Animation ID", "", function(input)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local currentAnimationTrack

    if currentAnimationTrack then
        currentAnimationTrack:Stop()
    end

    local animationId = input
    if animationId == "" then return end

    local Animation = Instance.new("Animation")
    Animation.AnimationId = "rbxassetid://" .. animationId

    local character = LocalPlayer.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            currentAnimationTrack = animator:LoadAnimation(Animation)
            currentAnimationTrack:Play()

            delay(10, function()
                currentAnimationTrack:Stop()
            end)
        end
    end
end)
M:NewButton("Custom Commands", "", function()
    local pref = "!"
    local b = game.Players.LocalPlayer
    local c = b.Character
    local d = {}

    local function e(f, g)
        game:GetService("StarterGui"):SetCore("SendNotification", {Title = f, Text = g})
    end

    local function resetD()
        d = {}
    end

    b.Chatted:Connect(function(h)
        h = h:lower()
        if string.sub(h, 1, 3) == "/e " then
            h = string.sub(h, 4)
        end
        if string.sub(h, 1, 1) == pref then
            local i
            local j = string.find(h, " ")
            if j then
                i = string.sub(h, 2, j - 1)
            else
                i = string.sub(h, 2)
            end
            if i == "respawn" or i == "re" or i == "r" and not d[i] then
                d[i] = true
                local Event = game:GetService("ReplicatedStorage").Events.Respawn
                Event:FireServer()
                e("Respawn Command", "Player respawned.")
            elseif i == "mrespawn" or i == "mre" or i == "m" and not d[i] then
                d[i] = true
                local LocalPlayer = game.Players.LocalPlayer
                local Character = LocalPlayer.Character
                local Humanoid = Character.Humanoid
                local Mouse = LocalPlayer:GetMouse()
                local Respawn = game:GetService("ReplicatedStorage").Events.Respawn
                Respawn:FireServer()
                wait()
                local Morph = game:GetService("ReplicatedStorage").Events.Morph
                Morph:FireServer("Mortal")
                e("Mortal Respawn Command", "Player respawned as mortal.")
            end
        end
    end)

    while true do
        resetD()
        wait(5)
    end
end)
local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "bring" then
            if d[command] then
                return
            end
            task.spawn(function()
                d[command] = true
                wait(1)
                d[command] = false
            end)
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = GetPlayer(playerName)
            if targetPlayer then
                local event = game.ReplicatedStorage.Events.Witch
                wait(0.3)
                event:FireServer("Magic", {"Motus", true, targetPlayer.Character})
            end
        elseif command == "cbring" then
            if d[command] then
                return
            end
            task.spawn(function()
                d[command] = true
                wait(1)
                d[command] = false
            end)
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = cFind(playerName)
            if targetPlayer then
                local event = game.ReplicatedStorage.Events.Witch
                wait(0.3)
                event:FireServer("Magic", {"Motus", true, targetPlayer.Character})
            end
        end
    end
end

b.Chatted:Connect(handleChat)

local isHoldingMouse = false

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isHoldingMouse = true
        playHoldingAnimation()
    end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isHoldingMouse = false
        stopHoldingAnimation()
    end
end)

local function playHoldingAnimation()
    local AnimationId = "rbxassetid://4756397058"
    local Animation = Instance.new("Animation")
    Animation.AnimationId = AnimationId

    local humanoid = c:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end

        local animationTrack = animator:LoadAnimation(Animation)
        animationTrack:Play()
    end
end

local function stopHoldingAnimation()
    local humanoid = c:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if animator then
            animator:StopAllAnimations()
        end
    end
end

game.ReplicatedStorage.Events.Witch.OnClientEvent:Connect(function(eventName, params)
    if eventName == "Magic" and params[1] == "Motus" and params[2] then
        playHoldingAnimation()
    end
end)
local pref = "!"
local b = game.Players.LocalPlayer
local Player = b.Name

local removeFlag = false
local renderConnection

local function handleRemove()
    if removeFlag then
        game.Workspace.Live[Player].disableMovement:Destroy()
        game.Workspace.Live[Player].disableMagic:Destroy()
        game.Workspace.Live[Player].disablePunching:Destroy()
        game.Workspace.Live[Player].disableSiphoning:Destroy()
        game.Workspace.Live[Player].disableFeeding:Destroy()
        renderConnection:Disconnect()
        removeFlag = false
    end
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command = string.match(message, "%w+")
        if command == "remove" then
            removeFlag = true
            handleRemove()
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "lbring" then
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = GetPlayer(playerName)
            if targetPlayer then
                d["lbring"] = true
                repeat
                    local event = game.ReplicatedStorage.Events.Witch
                    wait()
                    event:FireServer("Magic", {"Motus", true, targetPlayer.Character})
                until not d["lbring"]
            end
        elseif command == "lcbring" then
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = cFind(playerName)
            if targetPlayer then
                d["lcbring"] = true
                repeat
                    local event = game.ReplicatedStorage.Events.Witch
                    wait()
                    event:FireServer("Magic", {"Motus", true, targetPlayer.Character})
                until not d["lcbring"]
            end
        elseif command == "unlbring" then
            d["lbring"] = false
            d["lcbring"] = false
        end
    end
end

b.Chatted:Connect(handleChat)
_G.AutoSleepPlayers = {}
local Prefix = "!"
local Player = game:GetService("Players").LocalPlayer

local function GetPlayer(String)
    local Found = {}
    local strl = String:lower()
    if strl == "all" then
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            table.insert(Found,v)
        end
    elseif strl == "others" then
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name ~= Player.Name then
                table.insert(Found,v)
            end
        end  
    elseif strl == "me" then
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name == Player.Name then
                table.insert(Found,v)
            end
        end  
    else
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name:lower():sub(1, #String) == String:lower() then
                table.insert(Found,v)
            end
        end    
    end
    return Found    
end

local Number = 11
local Number2 = 15
Player.Chatted:Connect(function(Message)
    if string.sub(Message, 1, Number) == Prefix.."AutoSleep " or
       string.sub(Message, 1, Number) == Prefix.."Autosleep " or
       string.sub(Message, 1, Number) == Prefix.."autosleep " or
       string.sub(Message, 1, Number) == Prefix.."AUtosleep " or
       string.sub(Message, 1, Number) == Prefix.."AUTOSLEEP " or
       string.sub(Message, 1, Number) == Prefix.."AUtoSleep " then
        for i,v in pairs(GetPlayer(string.sub(Message, Number + 1))) do
            _G.AutoSleepPlayers[v.Name] = true
            coroutine.resume(coroutine.create(function()
                while _G.AutoSleepPlayers[v.Name] do
                    task.wait(7.1)
                    if _G.AutoSleepPlayers[v.Name] and game.Workspace.Live:FindFirstChild(v.Name) then
                        local A_1 = "Magic"
                        local A_2 = {
                            [1] = "SleepSpell", 
                            [2] = game.Workspace.Live[v.Name]
                        }
                        local Event = game:GetService("ReplicatedStorage").Events.Witch
                        Event:FireServer(A_1, A_2)
                    else
                        break
                    end
                end
            end))
        end
    elseif string.sub(Message, 1, Number2) == Prefix.."StopAutoSleep" or
           string.sub(Message, 1, Number2) == Prefix.."stopAutosleep" or
           string.sub(Message, 1, Number2) == Prefix.."stopautosleep" or
           string.sub(Message, 1, Number2) == Prefix.."STopAutoSleep" or
           string.sub(Message, 1, Number2) == Prefix.."STOPAUTOSLEEP" or
           string.sub(Message, 1, Number2) == Prefix.."stopAutoSleep" then
        for i,v in pairs(GetPlayer(string.sub(Message, Number2 + 1))) do
            _G.AutoSleepPlayers[v.Name] = false
        end
    end
end)
local prefix = "!"
local player = game.Players.LocalPlayer

local function BurnPlayer(targetPlayer)
    local magicEvent = game.ReplicatedStorage.Events.Witch
    for i = 1, 6 do
        magicEvent:FireServer("Magic", {"FireSpell", targetPlayer})
        wait(0.1)
    end
end

local function GetPlayerByUsername(username)
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name:lower():match(username:lower()) then
            return player
        end
    end
    return nil
end

player.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == prefix then
        local targetUsername = lowerMessage:match("!burn%s+(.+)")
        if targetUsername then
            local targetPlayer = GetPlayerByUsername(targetUsername)
            if targetPlayer then
                BurnPlayer(targetPlayer)
            end
        end
    end
end)
local prefix = "!"
local player = game.Players.LocalPlayer

local function BurnPlayer(targetCharacter)
    local magicEvent = game.ReplicatedStorage.Events.Witch
    for i = 1, 6 do
        magicEvent:FireServer("Magic", {"FireSpell", targetCharacter})
        wait(0.1)
    end
end

local function GetCharacterByName(characterName)
    for _, player in ipairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("CharacterName") and character.CharacterName.Value:lower() == characterName:lower() then
            return character
        end
    end
    return nil
end

player.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == prefix then
        local targetCharacterName = lowerMessage:match("!burn%s+(.+)")
        if targetCharacterName then
            local targetCharacter = GetCharacterByName(targetCharacterName)
            if targetCharacter then
                BurnPlayer(targetCharacter)
            end
        end
    end
end)
local prefix = "!"
local player = game.Players.LocalPlayer

player.Chatted:Connect(function(message)
    message = message:lower()
    if string.sub(message, 1, 1) == prefix then
        local command, target = message:match("!([%w_]+)%s*(%w*)")
        if command == "to" then
            if target == "random" then
                local randomPlayer = getRandomPlayer()
                if randomPlayer then
                    player.Character:SetPrimaryPartCFrame(randomPlayer.Character.PrimaryPart.CFrame)
                end
            else
                local targetPlayer = getPlayer(target)
                if targetPlayer then
                    player.Character:SetPrimaryPartCFrame(targetPlayer.Character.PrimaryPart.CFrame)
                else
                    local targetCharacter = getCharacter(target)
                    if targetCharacter then
                        player.Character:SetPrimaryPartCFrame(targetCharacter.PrimaryPart.CFrame)
                    end
                end
            end
        end
    end
end)

function getPlayer(name)
    local target
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():sub(1, #name) == name:lower() then
            target = player
            break
        end
    end
    return target
end

function getCharacter(name)
    local target
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("CharacterName") and character.CharacterName.Value:lower():sub(1, #name) == name:lower() then
            target = character
            break
        end
    end
    return target
end

function getRandomPlayer()
    local players = game.Players:GetPlayers()
    if #players > 1 then
        local randomIndex
        repeat
            randomIndex = math.random(1, #players)
        until players[randomIndex] ~= player
        return players[randomIndex]
    end
    return nil
end
local prefix = "!"
local player = game.Players.LocalPlayer
local players = game.Players:GetPlayers()

player.Chatted:Connect(function(message)
    message = message:lower()
    if string.sub(message, 1, 1) == prefix then
        local command, target = message:match("!([%w_]+)%s*(%w*)")
        if command == "copyuser" or command == "copy" then
            local targetPlayer
            if target == "random" then
                targetPlayer = getRandomPlayer()
            else
                targetPlayer = getPlayer(target)
            end
            if targetPlayer then
                copyUsername(targetPlayer)
            end
        end
    end
end)

function getPlayer(name)
    for _, player in pairs(players) do
        if player.Name:lower():sub(1, #name) == name:lower() then
            return player
        end
    end
end

function getRandomPlayer()
    local randomIndex = math.random(1, #players)
    return players[randomIndex]
end

function copyUsername(targetPlayer)
    setclipboard(targetPlayer.Name)
end

local prefix = "!"
local player = game.Players.LocalPlayer

local function StakePlayer(targetCharacter)
    local stakeEvent = game:GetService("ReplicatedStorage").Events.Stake
    player.Character:SetPrimaryPartCFrame(targetCharacter.HumanoidRootPart.CFrame)
    wait(0.5)
    stakeEvent:FireServer(targetCharacter, "Original")
end

local function GetCharacterByName(characterName)
    for _, player in ipairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("CharacterName") and character.CharacterName.Value:lower() == characterName:lower() then
            return character
        end
    end
    return nil
end

player.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == prefix then
        local command, target = lowerMessage:match("!([%w_]+)%s*(%S+)")
        if command == "stake" then
            local targetCharacterName = target
            if targetCharacterName then
                local targetCharacter = GetCharacterByName(targetCharacterName)
                if targetCharacter then
                    StakePlayer(targetCharacter)
                end
            end
        end
    end
end)
local prefix = "!"
local player = game.Players.LocalPlayer

local function StakePlayer(targetCharacter)
    local stakeEvent = game:GetService("ReplicatedStorage").Events.Stake
    player.Character:SetPrimaryPartCFrame(targetCharacter.HumanoidRootPart.CFrame)
    wait(0.5)
    stakeEvent:FireServer(targetCharacter, "Original")
end

local function GetCharacterByName(characterName)
    for _, player in ipairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("CharacterName") and character.CharacterName.Value:lower() == characterName:lower() then
            return character
        end
    end
    return nil
end

player.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == prefix then
        local command, target = lowerMessage:match("!([%w_]+)%s*(%S+)")
        if command == "stake" then
            local targetCharacterName = target
            if targetCharacterName then
                local targetCharacter = GetCharacterByName(targetCharacterName)
                if targetCharacter then
                    StakePlayer(targetCharacter)
                end
            end
        end
    end
end)

local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "bring" then
            local subCommand = string.sub(message, spaceIndex + 1)
            if subCommand == "all" then
                if d[command] then
                    return
                end
                task.spawn(function()
                    d[command] = true
                    wait(1)
                    d[command] = false
                end)
                for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                    if player ~= b then
                        local event = game.ReplicatedStorage.Events.Witch
                        wait()
                        event:FireServer("Magic", {"Motus", true, player.Character})
                    end
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local player = game.Players.LocalPlayer

player.Chatted:Connect(function(message)
    message = message:lower()
    if message == "res" then
        teleportToRandomLocation()
    elseif message == "cosmic" then
        teleportToCosmicLocation()
    elseif message == "spawn" then
        teleportToSpawnLocation()
    elseif message == "den" then
        teleportToDenLocation()
    end
end)

function teleportToRandomLocation()
    local pl = player.Character.HumanoidRootPart
    local locations = {
        CFrame.new(-440, 5, -0),
        CFrame.new(-126, 5, 2)
    }
    local randomLocation = locations[math.random(1, #locations)]
    wait()
    pl.CFrame = randomLocation
end

function teleportToCosmicLocation()
    local pl = player.Character.HumanoidRootPart
    local location = CFrame.new(-376, -268, -4881)
    wait()
    pl.CFrame = location
end

function teleportToSpawnLocation()
    local pl = player.Character.HumanoidRootPart
    local location = CFrame.new(-502, 5, 261)
    wait()
    pl.CFrame = location
end

function teleportToDenLocation()
    local pl = player.Character.HumanoidRootPart
    local location = CFrame.new(432, 7, 651)
    wait(0.1)
    pl.CFrame = location
end
local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "channel" then
            local subCommand = string.sub(message, spaceIndex + 1)
            local usernameIndex = string.find(subCommand, " ")
            if usernameIndex then
                local username = string.sub(subCommand, usernameIndex + 1)
                local playerToChannel = GetPlayer(username)
                if playerToChannel then
                    local event = game.ReplicatedStorage.Events.Witch
                    event:FireServer("Magic", {"requestChanneling", true, playerToChannel.Character})
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "h" or command == "head" then
            local subCommand = string.sub(message, spaceIndex + 1)
            if subCommand == "all" then
                if d[command] then
                    return
                end
                task.spawn(function()
                    d[command] = true
                    wait(1)
                    d[command] = false
                end)
                for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                    if player ~= b then
                        local targetPlayer = player.Character
                        if targetPlayer then
                            local user = game.Players[player.Name].Character
                            local args = {
                                [1] = "Decapitate",
                                [2] = {
                                    [1] = user
                                }
                            }
                            game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                        end
                    end
                end
            elseif subCommand == "me" then
                local user = game.Players.LocalPlayer.Character
                local args = {
                    [1] = "Decapitate",
                    [2] = {
                        [1] = user
                    }
                }
                game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
            else
                local targetPlayer = GetPlayer(subCommand)
                if targetPlayer then
                    local user = game.Players[targetPlayer.Name].Character
                    local args = {
                        [1] = "Decapitate",
                        [2] = {
                            [1] = user
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "rip" then
            local subCommand = string.sub(message, spaceIndex + 1)
            if subCommand == "all" then
                if d[command] then
                    return
                end
                task.spawn(function()
                    d[command] = true
                    wait(1)
                    d[command] = false
                end)
                for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                    if player ~= b then
                        local targetPlayer = player.Character
                        if targetPlayer then
                            local user = game.Players[player.Name].Character
                            local args = {
                                [1] = "RipOutHeart",
                                [2] = {
                                    [1] = user
                                }
                            }
                            game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                        end
                    end
                end
            elseif subCommand == "me" then
                local user = game.Players.LocalPlayer.Character
                local args = {
                    [1] = "RipOutHeart",
                    [2] = {
                        [1] = user
                    }
                }
                game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
            else
                local targetPlayer = GetPlayer(subCommand)
                if targetPlayer then
                    local user = game.Players[targetPlayer.Name].Character
                    local args = {
                        [1] = "RipOutHeart",
                        [2] = {
                            [1] = user
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = "!"
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName or player.Character and player.Character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == "me" then
        result = game.Players.LocalPlayer
    end
    if name == "" or name == " " then
        result = nil
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "unglitch" then
            if d[command] then
                return
            end
            task.spawn(function()
                d[command] = true
                wait(1)
                d[command] = false
            end)
            local targetName = string.sub(message, spaceIndex + 1)
            local targetPlayer = GetPlayer(targetName)
            if targetPlayer then
                local argsFreeze = {
                    "Magic",
                    {
                        "Freeze",
                        targetPlayer.Character
                    }
                }
                local argsPainInflict = {
                    "PainInflict",
                    {
                        targetPlayer.Character
                    }
                }
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(argsFreeze))
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(argsPainInflict))
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = "!"
local b = game.Players.LocalPlayer

local function GetCharacter(name)
    local result
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("CharacterName") then
            if player.Character.CharacterName.Value:lower():sub(1, #name) == name:lower() then
                result = player.Character
                break
            end
        end
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == "/e " then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, " ")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == "c" then
            local subCommand = string.sub(message, spaceIndex + 1)
            local characterName, action = subCommand:match("(%S+)%s+(%S+)")
            if characterName and action then
                local targetCharacter = GetCharacter(characterName) or game.Players:FindFirstChild(characterName)
                local bossCharacter = GetCharacter("Jacobojacob17") or game.Players:FindFirstChild("Jacobojacob17")
                if bossCharacter and targetCharacter then
                    local argsBoss = {
                        [1] = "Start",
                        [2] = {
                            [1] = bossCharacter
                        }
                    }
                    local argsTarget = {
                        [1] = "Start",
                        [2] = {
                            [1] = targetCharacter
                        }
                    }

                    local originalPosition = targetCharacter.HumanoidRootPart.Position

                    if action == "n" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "NoMagic"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "um" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "AllowMagic"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "d" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "StandStill"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "m" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "AllowMove"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "p" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 30 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "PunchSelf"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "dp" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "DontPunch"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "a" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "AllowPunch"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "g" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "GiveStake"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "r" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "RingOff"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "ro" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "RingOn"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "s" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "Sleep"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "df" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "DontFeed"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "af" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "AllowFeed"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "f" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "Follow"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    elseif action == "t" then
                        game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsBoss))
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(argsTarget))
                            local A_1 = "WearwolfTurn"
                            local A_2 = {[1] = targetCharacter}
                            game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(A_1, A_2)
                        end
                    end
                    targetCharacter.HumanoidRootPart.CFrame = CFrame.new(originalPosition)
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local Prefix = "!"
local Player = game:GetService("Players").LocalPlayer

local function GetPlayer(String)
    local Found = {}
    local strl = String:lower()
    local players = game:GetService("Players"):GetPlayers()

    if strl == "all" then
        for _, v in pairs(players) do
            table.insert(Found, v)
        end
    elseif strl == "others" then
        for _, v in pairs(players) do
            if v.Name ~= Player.Name then
                table.insert(Found, v)
            end
        end
    elseif strl == "me" then
        table.insert(Found, Player)
    else
        for _, v in pairs(players) do
            if v.Name:lower():sub(1, #String) == strl then
                table.insert(Found, v)
            end
        end
    end

    return Found
end

Player.Chatted:Connect(function(Message)
    local loweredMessage = Message:lower()
    if loweredMessage:sub(1, 6) == (Prefix .. "ress ") then
        for _, v in pairs(GetPlayer(Message:sub(7))) do
	wait(0.5)
            local A_1 = "Magic"
            local A_2 = {
                [1] = "Motus",
                [2] = true,
                [3] = game:GetService("Workspace").deathClones[v.Name .. "deathClone"]
            }
            local Event = game:GetService("ReplicatedStorage").Events.Witch
            Event:FireServer(A_1, A_2)
        end
    end
end)
local antiBurnPlayers = {}

M:NewButton("Anti Fire", "", function()
    local function addPlayerToAntiBurn(playerName)
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.Name:lower():find(playerName:lower()) then
                antiBurnPlayers[player.Name] = true
                print(player.Name .. " added to anti-burn list.")
                antiBurn(player.Character)
                return
            end
        end
        print("Player not found.")
    end

    local function removePlayerFromAntiBurn(playerName)
        if antiBurnPlayers[playerName] then
            antiBurnPlayers[playerName] = nil
            print(playerName .. " removed from anti-burn list.")
        else
            print("Player not found in anti-burn list.")
        end
    end

    local function isInAntiBurnList(player)
        return antiBurnPlayers[player.Name] == true
    end

    local function antiBurn(character)
        local witch = game.ReplicatedStorage.Events.Witch
        while wait(1.3) do
            if _G.stop == true then
                return
            end
            if character and character:FindFirstChild("UpperTorso") and character.UpperTorso:FindFirstChild("Flames") and isInAntiBurnList(character.Parent) then
                witch:FireServer("Magic", {"NoFire", character})
            end
        end
    end

    game.Players.PlayerAdded:Connect(function(player)
        player.Chatted:Connect(function(message)
            local command, playerName = message:match("!(%w+)%s*(%w+)")
            if command and playerName then
                if command:lower() == "antifire" then
                    addPlayerToAntiBurn(playerName)
                elseif command:lower() == "removeantifire" then
                    removePlayerFromAntiBurn(playerName)
                end
            end
        end)
    end)

    for _, player in ipairs(game.Players:GetPlayers()) do
        player.Chatted:Connect(function(message)
            local command, playerName = message:match("!(%w+)%s*(%w+)")
            if command and playerName then
                if command:lower() == "antifire" then
                    addPlayerToAntiBurn(playerName)
                elseif command:lower() == "removeantifire" then
                    removePlayerFromAntiBurn(playerName)
                end
            end
        end)
    end
end)
local Ban1 = game:GetService("ReplicatedStorage").Events:FindFirstChild("ModBan")
local Ban2 = game:GetService("ReplicatedStorage").Events:FindFirstChild("BanClient")
local Ban3 = game:GetService("ReplicatedStorage").Events:FindFirstChild("Ban")
local Ban4 = game:GetService("ReplicatedStorage").Events:FindFirstChild("idontexploit")
local Ban5 = game:GetService("ReplicatedStorage").Events:FindFirstChild("logAction")
local Ban6 = game:GetService("ReplicatedStorage").Events:FindFirstChild("logAction")

while _G.ANTIBAN == true do
    if Ban1 then
        Ban1:Destroy()
    end
    if Ban2 then
        Ban2:Destroy()
    end
    if Ban3 then
        Ban3:Destroy()
    end
    if Ban4 then
        Ban4:Destroy()
    end
    if Ban5 then
        Ban5:Destroy()
    end
    if Ban6 then
        Ban6:Destroy()
    end
    wait()
end
M:NewButton("run like a vamp", "ate", function()
    local Player = game:GetService("Players").LocalPlayer.Name
    
    local className = "Part"
    local parent = game.Workspace.Live[Player]
    local part = Instance.new(className, parent)
    
    game.Workspace.Live[Player]:WaitForChild("Part").Name = "Vampire"
    end)
    M:NewButton("Run like a wolf", "run away x", function()
    local Player = game:GetService("Players").LocalPlayer.Name
    
    local className = "Part"
    local parent = game.Workspace.Live[Player]
    local part = Instance.new(className, parent)
    
    game.Workspace.Live[Player]:WaitForChild("Part").Name = "Werewolf"
    end)
    M:NewButton("Run normally", "run away x", function()
    local Player = game:GetService("Players").LocalPlayer.Name
    
    game.Workspace.Live[Player]:WaitForChild("Vampire"):Destroy()
    game.Workspace.Live[Player]:WaitForChild("Werewolf"):Destroy()
    end)
M:NewButton("Change Name", "", function()
	_G.auto_name = false
end)

M:NewButton("Stake All", "", function()
	local players = game.Workspace.Live

	for _,player in pairs (players:GetChildren()) do
		local link = game.Players:GetPlayerFromCharacter(player)
		if player:FindFirstChild("Humanoid") then
			if  link == game.Players.LocalPlayer then
				return
			else
				local A_1 = player
				local A_2 = "Original"
				local Event = game:GetService("ReplicatedStorage").Events.Stake
				Event:FireServer(A_1, A_2)
			end
		end
	end
end)
M:NewButton("Reload Gui", "", function()
	local GUI = game.CoreGui:FindFirstChild("ScreenGui")
	if GUI then
        for i=1,3 do
            GUI:Destroy()
        end
	end
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/BoiDiandre/TheLua/main/THE%20FLOPPIEST%20FLOP'),true))()
end)
M:NewButton("Hide Name Tag", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Live = game.Workspace.Live
	if Character.Head:FindFirstChild("Username") then
		local NameTag = Character.Head:FindFirstChild("Username")
		NameTag:Destroy()
	end
end)
M:NewButton("Siphon", "", function()
    local Player = game.Players.LocalPlayer
    local Character = Player.Character
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Event = ReplicatedStorage:FindFirstChild("Events") and ReplicatedStorage.Events:FindFirstChild("Witch")
    
    if Event then
        for i = 1, 9 do
            local A_1 = "SelfSiphon"
            Event:FireServer(A_1)
        end
    end
end)
M:NewButton("Unglitch", "", function()
	local plr = game.Players.LocalPlayer
	local Character = plr.Character or plr.CharacterAdded:Wait()
	if Character:FindFirstChild("Acting") then
		Character:FindFirstChild("Acting"):Destroy()
		local Player = game.Players.LocalPlayer.Character.Humanoid.ragdoll
		Player.Value = true
		task.wait()
		Player.Value = false
	else
		local Player = game.Players.LocalPlayer.Character.Humanoid.ragdoll
		Player.Value = true
		task.wait()
		Player.Value = false

	end
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "UnGlitch loaded!";
		Text = "Made by tisnoah#0."
	})
end)
M:NewButton("Respawn", "", function()
	local Event = game:GetService("ReplicatedStorage").Events.Respawn
	Event:FireServer()
end)
M:NewButton("Mortal Respawn", "", function()
	local LocalPlayer = game.Players.LocalPlayer
	local Character = LocalPlayer.Character
	local Humanoid = Character.Humanoid
	local Mouse = LocalPlayer:GetMouse()
	local Respawn = game:GetService("ReplicatedStorage").Events.Respawn
	Respawn:FireServer()
	wait(1.3)
	local Morph = game:GetService("ReplicatedStorage").Events.Morph
	Morph:FireServer("Mortal")
end)
M:NewButton("Inf Stamina", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character

	while task.wait() do
		if Character:FindFirstChild("Stamina") then
			local Stamina = Character:FindFirstChild("Stamina")
			local Max = Stamina.Max
			Stamina.Value = 200
		end
	end
end)
M:NewButton("Load R-Spy", "", function()
    for k, v in pairs(getgc(true)) do
        if pcall(function() return rawget(v, "indexInstance") end) and type(rawget(v, "indexInstance")) == "table" then
            local indexInstance = rawget(v, "indexInstance")
            if type(indexInstance) == "table" and indexInstance[1] == "kick" then
                v.tvk = {"kick", function() return game.Workspace:WaitForChild("YourChildNameHere") end}
            end
        end
    end
end)
M:NewButton("Get Vervain", "", function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(68, 6, -47)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-106, 9, 45)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-512, 3, 178)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-486, 5, 238)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-495, 6, 14)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-257, -26, -70)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-504, 5, 265)
end)
M:NewButton("Sybil Server Crash", "", function()
    local Plr = game.Players.LocalPlayer

    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
    
                local args = {
                    [1] = "SirenInflict",
                    [2] = {
                        [1] = Target
                    }
                }
                for i=1,300 do
                    game:GetService("ReplicatedStorage").Events.Siren:FireServer(unpack(args))
                end
            end
        end
    end
end)
CA:NewTextBox("Astral Convergence", "", function(playerName)
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local animationTrack = nil

    local function playAnimation(character, animationId)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local Animation = Instance.new("Animation")
            Animation.AnimationId = animationId

            animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()
            
            return animationTrack
        else
            warn("Humanoid not found in character.")
            return nil
        end
    end

    local function summonPlayer(targetPlayer)
        local event = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Witch", 5)
        if event then
            wait(0.5)
            event:FireServer("Magic", {"Motus", true, targetPlayer.Character})
        else
            warn("Witch event not found in ReplicatedStorage.")
        end
    end

    local function findPlayerByName(name)
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name:lower() == name:lower() or player.DisplayName:lower() == name:lower() then
                return player
            end
        end
        return nil
    end

    local function onTextboxSubmit(playerName)
        local targetPlayer = findPlayerByName(playerName)
        if targetPlayer and targetPlayer.Character then
            local spell = "Across space and time, appear before me, " ..
             playerName .. ", once and for all! " ..
             "I summon thee from distant lands!"

            local chatEvent = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest", 5)
            if chatEvent then
                chatEvent:FireServer(spell, "All")
            else
                warn("Chat event not found")
            end
                
            local animationId = "rbxassetid://6064411911"
            if animationId then
                animationTrack = playAnimation(LocalPlayer.Character, animationId)
                if animationTrack then
                    summonPlayer(targetPlayer)
                    wait(1) -- Adjust this wait time as needed
                    animationTrack:Stop() -- Stop the animation after summoning
                end
            else
                warn("Animation not found.")
                summonPlayer(targetPlayer)
            end
        else
            warn("Player '" .. playerName .. "' not found or invalid.")
        end
    end

    onTextboxSubmit(playerName)
end)
CA:NewToggle("Vados Combo", "", function(isEnabled)
    local animationId = "rbxassetid://4756423861"

    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")

    local keyPressConnection = nil
    local chatConnections = {}

    local function playAnimation(character, animationId)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local Animation = Instance.new("Animation")
            Animation.AnimationId = animationId

            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()
        end
    end

    local function performMagicActions(target)
        local Event = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Witch")

        pcall(function()
            for _ = 1, 4 do
                Event:FireServer("Magic", {"FireSpell", target})
                wait()
            end

            local A_1 = "Push"
            local A_2 = {
                [1] = target
            }
            Event:FireServer(A_1, A_2)

            local A_1_Explosion = "Magic"
            local A_2_Explosion = {
                [1] = "Explosion",
                [2] = target.HumanoidRootPart.Position
            }
            Event:FireServer(A_1_Explosion, A_2_Explosion)
        end)
    end

    local function getPlayerUnderMouse()
        local mouse = LocalPlayer:GetMouse()
        local target = mouse.Target

        if target then
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Character and target:IsDescendantOf(player.Character) then
                    return player.Character
                end
            end
        end

        return nil
    end

    local function onKeyPress(input)
        if input.KeyCode == Enum.KeyCode.Two then
            if animationId then
                playAnimation(LocalPlayer.Character, animationId)
            end

            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ignis", "All")
            wait(0.1)
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Vados!", "All")
            wait(0.1)
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ignis", "All")

            local targetCharacter = getPlayerUnderMouse()

            if targetCharacter then
                performMagicActions(targetCharacter)
            end
        end
    end

    local function onChatMessage(player, message)
        if player == LocalPlayer and isEnabled then
            local chatConnection = ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:Connect(function()
                return
            end)
            table.insert(chatConnections, chatConnection)
        end
    end

    local function enablePowerCombo()
        keyPressConnection = UserInputService.InputBegan:Connect(onKeyPress)
        local chatConnection = ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest.OnClientEvent:Connect(onChatMessage)
        table.insert(chatConnections, chatConnection)
        while isEnabled do
            wait(0.1)
        end
    end

    local function disablePowerCombo()
        if keyPressConnection then
            keyPressConnection:Disconnect()
            keyPressConnection = nil
        end
        for _, chatConnection in ipairs(chatConnections) do
            chatConnection:Disconnect()
        end
        chatConnections = {}
    end

    if isEnabled then
        task.spawn(enablePowerCombo)
    else
        disablePowerCombo()
    end
end)
CA:NewToggle("Pain Combo One", "", function(isEnabled)
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")

    local keyPressConnection = nil

    local function performMagicActions(target)
        local Event = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Witch")

        pcall(function()
            for _ = 1, 5 do
                Event:FireServer("PainInflict", { target })
                wait()
            end
            for _ = 1, 3 do
                Event:FireServer("FireSpell", { target })
                wait()
            end
        end)
    end

    local function getPlayerUnderMouse()
        local mouse = LocalPlayer:GetMouse()
        local target = mouse.Target

        if target then
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Character and target:IsDescendantOf(player.Character) then
                    return player.Character
                end
            end
        end

        return nil
    end

    local function onKeyPress(input)
        if input.KeyCode == Enum.KeyCode.Three then
            if isEnabled then
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Dolor Maximus", "All")
                
                local targetCharacter = getPlayerUnderMouse()

                if targetCharacter then
                    performMagicActions(targetCharacter)
                end
            end
        end
    end

    local function enablePowerCombo()
        keyPressConnection = UserInputService.InputBegan:Connect(onKeyPress)
    end

    local function disablePowerCombo()
        if keyPressConnection then
            keyPressConnection:Disconnect()
            keyPressConnection = nil
        end
    end

    if isEnabled then
        enablePowerCombo()
    else
        disablePowerCombo()
    end
end)
CA:NewToggle("Pain Combo Two", "", function(isEnabled)
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")

    local keyPressConnection = nil

    local function performMagicActions(target)
        local Event = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Witch")

        pcall(function()
            for _ = 1, 5 do
                Event:FireServer("PainInflict", { target })
                wait()
            end
            for _ = 1, 5 do
                Event:FireServer("FireSpell", { target })
                wait()
            end
            Event:FireServer("SleepSpell", { target })
            wait()
            Event:FireServer("SnapNeck", { target })
        end)
    end

    local function getPlayerUnderMouse()
        local mouse = LocalPlayer:GetMouse()
        local target = mouse.Target

        if target then
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Character and target:IsDescendantOf(player.Character) then
                    return player.Character
                end
            end
        end

        return nil
    end

    local function onKeyPress(input)
        if input.KeyCode == Enum.KeyCode.Two then
            if isEnabled then
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("There seems to be a lack of respect around here, let me grant you that.", "All")
                
                local targetCharacter = getPlayerUnderMouse()

                if targetCharacter then
                    performMagicActions(targetCharacter)
                end
            end
        end
    end

    local function enablePowerCombo()
        keyPressConnection = UserInputService.InputBegan:Connect(onKeyPress)
    end

    local function disablePowerCombo()
        if keyPressConnection then
            keyPressConnection:Disconnect()
            keyPressConnection = nil
        end
    end

    if isEnabled then
        enablePowerCombo()
    else
        disablePowerCombo()
    end
end)
CA:NewButton("Noah's Immortality", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Workspace = game:GetService("Workspace")
    local LocalPlayer = Players.LocalPlayer

    local animationId = "rbxassetid://9237375399"
    local debounce = false

    local function playAnimation(character, animationId)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = animationId

        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()
            animationTrack.Looped = false
        end
    end

    local function applyVervainBody()
        if not LocalPlayer.Character:FindFirstChild("VervainBody") and Workspace.Live:FindFirstChild(LocalPlayer.Name) then
            local A_1 = "Magic"
            local A_2 = { [1] = "VervainBody", [2] = LocalPlayer.Character }
            local Event = ReplicatedStorage.Events.Witch
            Event:FireServer(A_1, A_2)
        end
    end

    local function destroyImmortalityComm()
        local immortalityFolder = Workspace.Live:FindFirstChild(LocalPlayer.Name) and Workspace.Live[LocalPlayer.Name]:FindFirstChild("Immortality")
        if immortalityFolder and immortalityFolder:FindFirstChild("Comm") then
            immortalityFolder.Comm:Destroy()
        end
    end

    local function saySpell(spell)
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spell, "All")
    end

    local function onSpellCast()
        if not debounce then
            debounce = true
            saySpell("Elysium's Grace!")
            playAnimation(LocalPlayer.Character, animationId)
            debounce = false
        end
    end

    coroutine.wrap(function()
        while true do
            applyVervainBody()
            wait(10)
        end
    end)()

    onSpellCast()
end)
CA:NewButton("Custom See Other Side", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local animationId = "rbxassetid://5845089952"

    local function playAnimation(character, animationId, callback)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = animationId

        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()

            animationTrack.Stopped:Connect(callback)
        end
    end

    local function createSeeGhostsFolder()
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local folder = Instance.new("Folder")
        folder.Name = "SeeGhosts"
        folder.Parent = character
    end

    local function onChatMessage(player, message)
        if player == Players.LocalPlayer and message == "Spectra Vision" then
            playAnimation(LocalPlayer.Character, animationId, createSeeGhostsFolder)
        end
    end

    ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(data)
        local speaker = data.FromSpeaker
        local message = data.Message
        local player = Players:FindFirstChild(speaker)
        if player and message then
            onChatMessage(player, message)
        end
    end)

    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Spectra Vision", "All")
end)
CA:NewButton("Punch (f)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Workspace = game:GetService("Workspace")

    local function punchAction()
        local cam = Workspace.CurrentCamera
        local mousePos = UserInputService:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        local players = {}
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Character then
                table.insert(players, player.Character)
            end
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = Workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, player in ipairs(Players:GetPlayers()) do
                if raycastResult.Instance:IsDescendantOf(player.Character) and player ~= LocalPlayer then
                    local AnimationId = "rbxassetid://9205187244"
                    local Animation = Instance.new("Animation")
                    Animation.AnimationId = AnimationId

                    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        local animator = humanoid:FindFirstChildOfClass("Animator")
                        if not animator then
                            animator = Instance.new("Animator")
                            animator.Parent = humanoid
                        end

                        local animationTrack = animator:LoadAnimation(Animation)
                        animationTrack:Play()

                        local args = {
                            [1] = "Punch",
                            [2] = {
                                [1] = false,
                                [2] = player.Character.Humanoid
                            }
                        }
                        ReplicatedStorage.Events.Vampire:FireServer(unpack(args))
                    end
                    return
                end
            end
        end
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.F then
            punchAction()
        end
    end)
end)
CA:NewButton("Mass Pain", "", function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local animationId = "rbxassetid://6064411911"

    local function playAnimation(character, animationId)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = animationId

        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()
        end
    end

    local function pushPlayersInRange()
        local pushRange = 15
        local localCharacter = LocalPlayer.Character
        if not localCharacter then return end

        local localPosition = localCharacter.PrimaryPart.Position

        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character and character ~= localCharacter then
                local characterPosition = character.PrimaryPart.Position
                local dist = (localPosition - characterPosition).Magnitude
                if dist <= pushRange then
                    local mag = (localCharacter.UpperTorso.Position - character.UpperTorso.Position).Magnitude
                    if mag < 15 then
                        local args = {
                            [1] = "Push",
                            [2] = {
                                [1] = character
                            }
                        }
                        ReplicatedStorage.Events.Witch:FireServer(unpack(args))
                    end
                end
            end
        end
    end

    local function triggerMagicSpell()
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("I said HEY!", "All")
        
        playAnimation(LocalPlayer.Character, animationId)

        wait()

        local Event = ReplicatedStorage.Events.Witch
        
        local allPlayers = Players:GetPlayers()
        local localPlayerPosition = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart and LocalPlayer.Character.PrimaryPart.Position
        

        for _, player in ipairs(allPlayers) do
            if player ~= LocalPlayer then
                local playerCharacter = player.Character
                if playerCharacter and playerCharacter.PrimaryPart then
                    local playerPosition = playerCharacter.PrimaryPart.Position
                    local distance = (playerPosition - localPlayerPosition).magnitude
                    if distance <= 15 then
                        local args = {
                            [1] = "PainInflict",
                            [2] = {
                                playerCharacter
                            }
                        }
                        Event:FireServer(unpack(args))
                    end
                end
            end
        end

        wait(5)

        pushPlayersInRange()
    end

    triggerMagicSpell()
end)
CA:NewButton("Noah's Resurrection Spell", "", function()
local Plr = game.Players.LocalPlayer
	local AnimationId = "7381251605"
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://"..AnimationId
	local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k:Play()
	k:AdjustSpeed(0.1)
	local AnimationId = "5396696784"
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://"..AnimationId
	local k2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k2:Play()
	k2:AdjustSpeed(0.1)

local args = {
    [1] = "Mednitra soko estamasa!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(0.9)
local args = {
    [1] = "Mednitra soko estamasa!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(0.9)
local args = {
    [1] = "Mednitra soko estamasa!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
   wait(0.6)
local args = {
    [1] = "Arise!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
for i,v in pairs(game.Workspace.ResurrectionCircles:GetChildren()) do
    for i,c in pairs(v:GetChildren()) do
        if c:IsA("RemoteEvent") then
            if game.Players.LocalPlayer.Character.Magic.Value >= 1 then
                c:FireServer()                
                c:FireServer()
                c:FireServer()
            end
        end
    end
end
wait(1)
k:Stop()
k2:Stop()
end)
CA:NewButton("Resurrection Spell", "", function()
local Plr = game.Players.LocalPlayer
	local AnimationId = "7381251605"
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://"..AnimationId
	local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k:Play()
	k:AdjustSpeed(0.1)
	local AnimationId = "5396696784"
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://"..AnimationId
	local k2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k2:Play()
	k2:AdjustSpeed(0.1)

local args = {
    [1] = "Berald Beroald Gab Gabor Agaba!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(0.9)
local args = {
    [1] = "Berald Beroald Gab Gabor Agaba!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(0.9)
local args = {
    [1] = "Berald Beroald Gab Gabor Agaba!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
   wait(0.9)
local args = {
    [1] = "Berald Beroald Gab Gabor Agaba!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
   wait(1)
local args = {
    [1] = "Return to the mortal coil! Arise!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("AstralisRes"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
workspace:WaitForChild("ResurrectionCircles"):WaitForChild("Resurrection"):WaitForChild("ResEvent"):FireServer()
for i,v in pairs(game.Workspace.ResurrectionCircles:GetChildren()) do
    for i,c in pairs(v:GetChildren()) do
        if c:IsA("RemoteEvent") then
            if game.Players.LocalPlayer.Character.Magic.Value >= 1 then
                c:FireServer()                
                c:FireServer()
                c:FireServer()
            end
        end
    end
end
wait(1)
k:Stop()
k2:Stop()
end)
CA:NewLabel("Area Spells")
CA:NewButton("Mass Force", "", function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Workspace = game:GetService("Workspace")

    local function distance(point1, point2)
        return (point1 - point2).Magnitude
    end

    local function pushPlayersInRange()
        local pushRange = 15
        local localCharacter = LocalPlayer.Character
        if not localCharacter then return end

        local localPosition = localCharacter.PrimaryPart.Position

        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character and character ~= localCharacter then
                local characterPosition = character.PrimaryPart.Position
                local dist = distance(localPosition, characterPosition)
                if dist <= pushRange then
                    local mag = (localCharacter.UpperTorso.Position - character.UpperTorso.Position).Magnitude
                    if mag < 15 then
                        local args = {
                            [1] = "Push",
                            [2] = {
                                [1] = character
                            }
                        }
                        ReplicatedStorage.Events.Witch:FireServer(unpack(args))
                    end
                end
            end
        end
    end

    local function playAnimationAndPush()
        local AnimationId = "rbxassetid://5420965844"
        local Animation = Instance.new("Animation")
        Animation.AnimationId = AnimationId
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end
            local animationTrack = animator:LoadAnimation(Animation)
            animationTrack:Play()
        end

        pushPlayersInRange()
    end

    playAnimationAndPush()

    local spell = "Experience the force of nature!"
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spell, "All")
end)
CA:NewButton("Fire Impact", "", function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Workspace = game:GetService("Workspace")

    local function distance(point1, point2)
        return (point1 - point2).Magnitude
    end

    local function pushPlayersInRange()
        local pushRange = 15
        local localCharacter = LocalPlayer.Character
        if not localCharacter then return end

        local localPosition = localCharacter.PrimaryPart.Position

        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character and character ~= localCharacter then
                local characterPosition = character.PrimaryPart.Position
                local dist = distance(localPosition, characterPosition)
                if dist <= pushRange then
                    local mag = (character.UpperTorso.Position - localCharacter.UpperTorso.Position).Magnitude
                    if mag < 15 then
                        local args = {
                            [1] = "Push",
                            [2] = {
                                [1] = character
                            }
                        }
                        ReplicatedStorage.Events.Witch:FireServer(unpack(args))
                    end
                end
            end
        end
    end

    local function setPlayersOnFire()
       local fireRange = 15
        local localCharacter = LocalPlayer.Character
        if not localCharacter then return end

        local localPosition = localCharacter.PrimaryPart.Position

        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character and character ~= localCharacter then
                local characterPosition = character.PrimaryPart.Position
                local dist = distance(localPosition, characterPosition)
                if dist <= fireRange then
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "FireSpell",
                            [2] = character
                        }
                    }
		   for _ = 1, 3 do
                    ReplicatedStorage.Events.Witch:FireServer(unpack(args))
                end
            end
        end
    end
    end

    local AnimationId = "rbxassetid://7381251605"
    local Animation = Instance.new("Animation")
    Animation.AnimationId = AnimationId
    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end
        local animationTrack = animator:LoadAnimation(Animation)
        animationTrack:Play()

        local spellMessage = "Feel the scorching flames of my wrath!"
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spellMessage, "All")

        pushPlayersInRange()
        setPlayersOnFire()
    end
end)
CA:NewButton("Crippling Hex", "", function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local function distance(point1, point2)
        return (point1 - point2).Magnitude
    end

    local localPosition = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart and LocalPlayer.Character.PrimaryPart.Position
    if not localPosition then
        warn("Local player position not found.")
        return
    end

    local hexRange = 15
    local affectedPlayers = {}

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local character = player.Character
            if character and character.PrimaryPart then
                local characterPosition = character.PrimaryPart.Position
                local dist = distance(localPosition, characterPosition)
                if dist <= hexRange then
                    table.insert(affectedPlayers, character)
                end
            end
        end
    end

    if #affectedPlayers > 0 then
        local spell = "Behold the power of the Cursed Hex!"
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spell, "All")

        for _, character in ipairs(affectedPlayers) do
            -- Logging the character name and actions
            print("Applying hex to:", character.Name)

            local breakLegArgs = {
                [1] = "Magic",
                [2] = {
                    [1] = "BreakLeg",
                    [2] = character
                }
            }

            local sleepSpellArgs = {
                [1] = "Magic",
                [2] = {
                    [1] = "SleepSpell",
                    [2] = character
                }
            }

            -- Fire events separately to check each one
            local successBreakLeg, errorBreakLeg = pcall(function()
                ReplicatedStorage.Events.Witch:FireServer(breakLegArgs)
            end)
            if not successBreakLeg then
                warn("Error firing BreakLeg event:", errorBreakLeg)
            end

            local successSleepSpell, errorSleepSpell = pcall(function()
                ReplicatedStorage.Events.Witch:FireServer(sleepSpellArgs)
            end)
            if not successSleepSpell then
                warn("Error firing SleepSpell event:", errorSleepSpell)
            end
        end
    else
        warn("No players affected by the hex.")
    end

    local AnimationId = "rbxassetid://9127963517"
    local Animation = Instance.new("Animation")
    Animation.AnimationId = AnimationId
    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end
        local animationTrack = animator:LoadAnimation(Animation)
        animationTrack:Play()
    else
        warn("Humanoid not found in local player's character.")
    end
end)
CA:NewButton("Lethal Twist", "", function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local function distance(point1, point2)
        return (point1 - point2).Magnitude
    end

    local localPosition = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart and LocalPlayer.Character.PrimaryPart.Position
    if not localPosition then
        warn("Local player's position not found.")
        return
    end

    local lethalRange = 15
    local affectedPlayers = {}

    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character and character.PrimaryPart and character ~= LocalPlayer.Character then
            local characterPosition = character.PrimaryPart.Position
            local dist = distance(localPosition, characterPosition)
            if dist <= lethalRange then
                table.insert(affectedPlayers, character)
            end
        end
    end

    if #affectedPlayers > 0 then
        local spell = "Feel the dark magic's twist!"
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spell, "All")

        for _, character in ipairs(affectedPlayers) do
            print("Applying Lethal Twist to:", character.Name)

            local breakLegArgs = {
                [1] = "Magic",
                [2] = {
                    [1] = "BreakLeg",
                    [2] = character
                }
            }

            local snapNeckArgs = {
                [1] = "Magic",
                [2] = {
                    [1] = "SnapNeck",
                    [2] = character
                }
            }
            print("Firing BreakLeg event with args:", breakLegArgs)
            print("Firing SnapNeck event with args:", snapNeckArgs)

            local successBreakLeg, errorBreakLeg = pcall(function()
                ReplicatedStorage.Events.Witch:FireServer(breakLegArgs)
            end)
            if not successBreakLeg then
                warn("Error firing BreakLeg event:", errorBreakLeg)
            end

            local successSnapNeck, errorSnapNeck = pcall(function()
                ReplicatedStorage.Events.Witch:FireServer(snapNeckArgs)
            end)
            if not successSnapNeck then
                warn("Error firing SnapNeck event:", errorSnapNeck)
            end
        end
    else
        warn("No players affected by the lethal twist.")
    end

    local AnimationId = "rbxassetid://9136189849"
    local Animation = Instance.new("Animation")
    Animation.AnimationId = AnimationId
    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end
        local animationTrack = animator:LoadAnimation(Animation)
        animationTrack:Play()
    else
        warn("Humanoid not found in local player's character.")
    end
end)
CA:NewLabel("Whole Server Spells")
CA:NewButton("Mass Telekinesis", "", function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local function massTelekinesis()
        local event = ReplicatedStorage.Events.Witch
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
		wait(0.2)
                event:FireServer("Magic", {"Motus", true, player.Character})
            end
        end
    end
    
    massTelekinesis()
end)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Events = ReplicatedStorage:WaitForChild("Events")
local ChatService = game:GetService("Chat")

local isCheckingQetsiyah = false
CS:NewButton("Auto Spawn as Qetsiyah", "", function()
    if isCheckingQetsiyah then return end
    isCheckingQetsiyah = true

    local characterName = "Qetsiyah"
    local chatMessage = "!autosteal " .. characterName

    ChatService:Chat(game.Players.LocalPlayer.Character, chatMessage, Enum.ChatColor.White)

    local RespawnEvent = Events:WaitForChild("Respawn")
    local MorphEvent = Events:WaitForChild("Morph")
    local TargetCharacter = ReplicatedStorage.Characters:WaitForChild(characterName)

    while true do
        if TargetCharacter.takenBy.Value == nil then
            RespawnEvent:FireServer()
            wait(0.1)
            MorphEvent:FireServer(characterName)
            isCheckingQetsiyah = false
            break
        end
        wait(0.1)
    end
end)

local isCheckingHope = false
CS:NewButton("Auto Spawn as Hope", "", function()
    if isCheckingHope then return end
    isCheckingHope = true

    local characterName = "Hope Mikaelson"
    local chatMessage = "!autosteal " .. characterName

    ChatService:Chat(game.Players.LocalPlayer.Character, chatMessage, Enum.ChatColor.White)

    local RespawnEvent = Events:WaitForChild("Respawn")
    local MorphEvent = Events:WaitForChild("Morph")
    local TargetCharacter = ReplicatedStorage.Characters:WaitForChild(characterName)

    while true do
        if TargetCharacter.takenBy.Value == nil then
            RespawnEvent:FireServer()
            wait(0.1)
            MorphEvent:FireServer(characterName)
            isCheckingHope = false
            break
        end
        wait(0.1)
    end
end)

local isCheckingBonnie = false
CS:NewButton("Auto Spawn as Bonnie", "", function()
    if isCheckingBonnie then return end
    isCheckingBonnie = true

    local characterName = "Bonnie Bennett"
    local chatMessage = "!autosteal " .. characterName

    ChatService:Chat(game.Players.LocalPlayer.Character, chatMessage, Enum.ChatColor.White)

    local RespawnEvent = Events:WaitForChild("Respawn")
    local MorphEvent = Events:WaitForChild("Morph")
    local TargetCharacter = ReplicatedStorage.Characters:WaitForChild(characterName)

    while true do
        if TargetCharacter.takenBy.Value == nil then
            RespawnEvent:FireServer()
            wait(0.1)
            MorphEvent:FireServer(characterName)
            isCheckingBonnie = false
            break
        end
        wait(0.1)
    end
end)

local isCheckingFreya = false
CS:NewButton("Auto Spawn as Freya", "", function()
    if isCheckingFreya then return end
    isCheckingFreya = true

    local characterName = "Freya Mikaelson"
    local chatMessage = "!autosteal " .. characterName

    ChatService:Chat(game.Players.LocalPlayer.Character, chatMessage, Enum.ChatColor.White)

    local RespawnEvent = Events:WaitForChild("Respawn")
    local MorphEvent = Events:WaitForChild("Morph")
    local TargetCharacter = ReplicatedStorage.Characters:WaitForChild(characterName)

    while true do
        if TargetCharacter.takenBy.Value == nil then
            RespawnEvent:FireServer()
            wait(0.1)
            MorphEvent:FireServer(characterName)
            isCheckingFreya = false
            break
        end
        wait(0.1)
    end
end)

local isCheckingKol = false
CS:NewButton("Auto Spawn as Kol", "", function()
    if isCheckingKol then return end
    isCheckingKol = true

    local characterName = "Kol Mikaelson"
    local chatMessage = "!autosteal " .. characterName

    ChatService:Chat(game.Players.LocalPlayer.Character, chatMessage, Enum.ChatColor.White)

    local RespawnEvent = Events:WaitForChild("Respawn")
    local MorphEvent = Events:WaitForChild("Morph")
    local TargetCharacter = ReplicatedStorage.Characters:WaitForChild(characterName)

    while true do
        if TargetCharacter.takenBy.Value == nil then
            RespawnEvent:FireServer()
            wait(0.1)
            MorphEvent:FireServer(characterName)
            isCheckingKol = false
            break
        end
        wait(0.1)
    end
end)
CS:NewLabel("Witches")
CS:NewButton("Spawn as Qetsiyah", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Qetsiyah"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Bonnie", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Bonnie Bennett"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Freya", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Freya Mikaelson"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Davina", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Davina Claire"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Genevieve", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Genevieve"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewLabel("Vampire Spawns")
CS:NewButton("Spawn as Kol", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Kol Mikaelson"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Katherine", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Katherine Pierce"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Tristan", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Tristan de Martel"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Aurora", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Aurora de Martel"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Stefan", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Stefan Salvatore"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Elena", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Elena Gilbert"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewLabel("Hertics/Wearwitch Spawns")
CS:NewButton("Spawn as Hope", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Hope Mikaelson"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Valerie", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Valerie Tulle"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Mary", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Mary Louise"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Nora", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Nora Hildegard"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Oscar", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Oscar"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Beau", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Beau"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewLabel("Hybirds")
CS:NewButton("Spawn as Niklaus", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Niklaus Mikaelson"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Hayley", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Hayley Marshall"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewLabel("Wearwolves")
CS:NewButton("Spawn as Jules", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Jules"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Tyler", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Tyler Lockwood"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Mason", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Mason Lockwood"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Rafael", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Rafael Waithe"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
CS:NewButton("Spawn as Jed", "", function()
    local Event = game:GetService("ReplicatedStorage").Events.Respawn
    Event:FireServer()
    wait(0.1)
    local args = {"Jed Tien"}
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Morph"):FireServer(unpack(args))
end)
--[[
Cu:NewButton("Self Res", "", function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer

    local function ragdollPlayer()
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.PlatformStand = true
            end
        end
    end

    local function floatPlayer()
        local character = LocalPlayer.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Anchored = false
                local startTime = tick()
                local duration = 5 -- Float duration
                local initialPosition = humanoidRootPart.Position
                local targetPosition = initialPosition + Vector3.new(0, 20, 0) -- Move upwards by 20 studs
                
                while tick() - startTime < duration do
                    local progress = (tick() - startTime) / duration
                    humanoidRootPart.CFrame = CFrame.new(Vector3.new(
                        initialPosition.X + (targetPosition.X - initialPosition.X) * progress,
                        initialPosition.Y + (targetPosition.Y - initialPosition.Y) * progress,
                        initialPosition.Z + (targetPosition.Z - initialPosition.Z) * progress
                    ))
                    wait()
                end
                
                humanoidRootPart.CFrame = CFrame.new(targetPosition)
                
                local args = {
                    [1] = 1
                }
                game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(unpack(args))
                
                wait(0.1)
                humanoidRootPart.Anchored = false
            end
        end
    end

    local function performActions()
        local Plr = LocalPlayer
        for _, Player in pairs(Players:GetPlayers()) do
            if Player.Character and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 15 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local Event = ReplicatedStorage.Events.Witch
                    for _ = 1, 3 do
                        Event:FireServer("Magic", {"FireSpell", Target})
                        Event:FireServer("Magic", {"Motus", false, Target})
                    end
                end
            end
        end
    end

    local function onChatMessage(player, message)
        if player == LocalPlayer and message == "SHAZAM!" then
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health < 20 then
                ragdollPlayer()
                wait(1)
                performActions()
                floatPlayer()
                humanoid.PlatformStand = false
            end
        end
    end

    ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(data)
        local player = Players:FindFirstChild(data.FromSpeaker)
        local message = data.Message
        if player and message then
            onChatMessage(player, message)
        end
    end)
end)
--]]
CU:NewButton("Scinde Corpus", "", function()
    setclipboard("Scinde Corpus")
    
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local Chat = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents")

    local targetCharacter = nil
    local keyPressConnection = nil

    local function performMagicActions(target)
        local Event = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Witch")

        local positions = {}
        local center = target.HumanoidRootPart.Position
        local radius = 10
        local steps = 12

        for i = 1, steps do
            local angle = (i / steps) * 2 * math.pi
            local x = center.X + radius * math.cos(angle)
            local z = center.Z + radius * math.sin(angle)
            table.insert(positions, Vector3.new(x, center.Y, z))
        end

        for _, position in ipairs(positions) do
            if not target.Parent or not target:FindFirstChild("Humanoid") or target.Humanoid.Health <= 0 then
                return
            end

            LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(position))
            Event:FireServer("PainInflict", { target })
            wait(0.1)
        end
    end

    local function onMouseClick()
        local mouse = LocalPlayer:GetMouse()
        local target = mouse.Target

        if target then
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Character and target:IsDescendantOf(player.Character) then
                    targetCharacter = player.Character
                    performMagicActions(targetCharacter)
                    break
                end
            end
        end
    end

    local function onChatMessage(player, message)
        if player == LocalPlayer and message == "Scinde Corpus" then
            if keyPressConnection then keyPressConnection:Disconnect() end
            keyPressConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if gameProcessedEvent then return end
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    onMouseClick()
                    keyPressConnection:Disconnect()
                    keyPressConnection = nil
                end
            end)
        end
    end

    local chatConnection = Chat.OnMessageDoneFiltering.OnClientEvent:Connect(onChatMessage)

    LocalPlayer.OnDestroy:Connect(function()
        if chatConnection then chatConnection:Disconnect() end
        if keyPressConnection then keyPressConnection:Disconnect() end
    end)
end)
Cu:NewButton("Enough!", "", function()
    local db = true

    local animationId = "rbxassetid://5422859012"

    local function playAnimation(character)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = animationId
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
        end
    end

    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, "enough!") then
            local Plr = game.Players.LocalPlayer
            for _, Player in pairs(game.Players:GetPlayers()) do
                if Player.Character ~= nil and Player ~= Plr then
                    local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                    if mag < 20 then
                        local Target = Player.Character or Player.CharacterAdded:Wait()

                        local Event = game:GetService("ReplicatedStorage").Events.Witch

                        Event:FireServer("Magic", {"FireSpell", Target})
                        Event:FireServer("Magic", {"Silence", Target})
                        Event:FireServer("Magic", {"Freeze", Target})
                        Event:FireServer("Magic", {"Motus", false, Target})

                        playAnimation(Plr.Character)
                    end

                    local punchMag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                    if punchMag < math.huge then
                        local punchTarget = Player.Character or Player.CharacterAdded:Wait()
                        local args = {
                            [1] = "Punch",
                            [2] = {
                                [1] = false,
                                [2] = punchTarget.Humanoid
                            }
                        }
            
                        game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    end
                end
            end
        end
    end)
end)
Cu:NewButton("Silence", "", function()
    local db = true

    local animationId = "rbxassetid://4756427378"

    local function playAnimation(character)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = animationId
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
        end
    end

    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, "silence!") then
            local localPlayer = game.Players.LocalPlayer
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player ~= localPlayer then
                    local mag = (player.Character.UpperTorso.Position - localPlayer.Character.UpperTorso.Position).Magnitude
                    if mag < math.huge then
                        local target = player.Character or player.CharacterAdded:Wait()

                        local event = game:GetService("ReplicatedStorage").Events.Witch

                        event:FireServer("Magic", {"Silence", target})

                        playAnimation(localPlayer.Character)
                    end
                end
            end
        end
    end)
end)
Cu:NewButton("Ina Pran Khos Suptheia Jhen Ai Pada Khey Rassattan", "", function()
    setclipboard([[Ina Pran Khos Suptheia Jhen Ai Pada Khey Rassattan]])
    local Player = game.Players.LocalPlayer
    local Character = Player.Character
    local UserInputService = game:GetService("UserInputService")
    local mouse = Player:GetMouse()
    local Debounce = true

    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, "ina pran khos suptheia jhen ai pada khey rassattan") then
            for _, TargetPlayer in pairs(game.Players:GetPlayers()) do
                if TargetPlayer ~= Player and TargetPlayer.Character then
                    local mag = (TargetPlayer.Character.UpperTorso.Position - Character.UpperTorso.Position).magnitude
                    if mag < 1000 then
                        local Target = TargetPlayer.Character

                        local A1 = "Magic"
                        local A2 = {
                            [1] = "FireSpell",
                            [2] = Target
                        }
                        local Event = game:GetService("ReplicatedStorage").Events.Witch

                        for _ = 1, 4 do
                            Event:FireServer(A1, A2)

                            local A_1 = "Magic"
                            local A_2 = {
                                [1] = "Explosion",
                                [2] = Target.HumanoidRootPart.CFrame.p
                            }
                            Event:FireServer(A_1, A_2)

                            local A_1 = "Push"
                            local A_2 = {
                                [1] = Target
                            }
                            Event:FireServer(A_1, A_2)
                        end
                    end
                end
            end
        end
    end)

    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, "ina pran khos suptheia jhen ai pada khey rassattan") then
            local Humanoid = Player.Character.Humanoid
            local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
            for _, v in pairs(ActiveTracks) do
                v:Stop()
            end
            local AnimationId = "6112652562"
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://"..AnimationId
            local k = Player.Character.Humanoid:LoadAnimation(Anim)
            k:Play()
            k:AdjustSpeed(0.5)
            wait(6)
            local Humanoid = Player.Character.Humanoid
            local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
            for _, v in pairs(ActiveTracks) do
                v:Stop()
            end
        end
    end)
end)
Cu:NewButton("Ascendo(say to use)", "", function()
    local Player = game.Players.LocalPlayer
    local Character = Player.Character
    local Humanoid = Character.Humanoid
    local UserInputService = game:GetService("UserInputService")
    local Mouse = Player:GetMouse()
    local Debounce = true
    local Key = 'Y'
    local db = true
    
    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, "ascendo") then
                    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
                    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
                    for _,v in pairs(ActiveTracks)
                        do v:Stop()
                    end
                    local AnimationId = "6112652562"
                    local Anim = Instance.new("Animation")
                    Anim.AnimationId = "rbxassetid://"..AnimationId
                    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
                    k:Play()
                    k:AdjustSpeed(0.5)
                    wait(16)
                    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
                    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
                    for _,v in pairs(ActiveTracks)
                        do v:Stop()
                    end
                end
            end)
end)
Cu:NewButton("Ascendo 2(click to use)", "", function()
		AnimationId = "507785072"
		local Ascendo = Instance.new("Animation")
		Ascendo.AnimationId = "rbxassetid://"..AnimationId
		local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo)
		k:Play()
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 45
		AnimationId = "5414156941"
		local Ascendo2 = Instance.new("Animation")
		Ascendo2.AnimationId = "rbxassetid://"..AnimationId
		local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo2)
		k:Play()
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = 5
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 45
		wait(10)   
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
		local Humanoid = game.Players.LocalPlayer.Character.Humanoid
		local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
		for _,v in pairs(ActiveTracks)
		    do v:Stop()
		end
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = 2
end)
Cu:NewButton("Ignis Ubique", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "ignis ubique") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()
						AnimationId = "5414902308"
						local Ascendo2 = Instance.new("Animation")
						Ascendo2.AnimationId = "rbxassetid://"..AnimationId
						local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo2)
						k:Play()
						local A1 = "Magic"
						local A2 = 
							{
								[1] = "FireSpell", 
								[2] = Target
							}
						for i = 1,20 do
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)
                    				end
						local Humanoid = game.Players.LocalPlayer.Character.Humanoid
						local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
						for _,v in pairs(ActiveTracks)
						do v:Stop()
						end
					end
				end
			end
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Ignis Ubique loaded";
		Text = "Made by tisnoah#0."
	})
end)
Cu:NewButton("Somnus", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "somnus") then
			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "SleepSpell", 
								[2] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
end)
T:NewButton("Cosmic", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-376, -268, -4881)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton("Spawn", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(448, 386, -14822)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton("Teleport To Astrailis Room", "", function()
   local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
   if game:GetService("Workspace"):FindFirstChild("AstralisDoor") then
		game:GetService("Workspace"):FindFirstChild("AstralisDoor"):Destroy()
	end
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-382, 3, -50)
end)
T:NewButton("UnderGround", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-27, -17, 168)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton("Mountain", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-174, 2, 355)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("The Wolf Den", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(432, 7, 651)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Human Spawn", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-502, 5, 261)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Void (Check Description)", "Fly Before use", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-461, -69, -200)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Witch Tunnel", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-225, -26, -69)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Res Circle 2", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-440, 5, -0)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton("Res Circle 1", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-126, 5, 2)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
local Char = "Sybil"
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Niklaus Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Hope Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Bonnie Bennett"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Beau"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Finn Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Oscar"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Mason Lockwood"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Kol Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Rebekah Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}
	for _ = 1, 4 do
	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Elijah Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
WB:NewToggle("Keybinds", "If true then Keybinds will work", function(state)
    if state == true then
        game.workspace.XWareValues.Keys.Value = "Active"
    else
        game.workspace.XWareValues.Keys.Value = "In Active"
    end
end)
WB:NewKeybind("Unragdoll", "",Enum.KeyCode.Z, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local args = {
        [1] = 1
    }
    game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(unpack(args))
    end
end)
local AnimationId = "5422859012"

local function playAnimation(character, animationId)
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://" .. animationId
    local k = character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
end

WB:NewKeybind("Push", "", Enum.KeyCode.R, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue
	            end
                 if player ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        if IsTyping then
            return
        end

        local player = getPlayer()
        local localPlayer = game.Players.LocalPlayer
        if player and player == localPlayer then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Push",
                [2] = {
                    [1] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            
            playAnimation(player.Character, AnimationId)
        end
    end
end)
WB:NewKeybind("Immobilus", "",Enum.KeyCode.X, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
	            end
                 if player ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Magic",
                [2] = {
                    [1] = "Freeze",
                    [2] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
        end
    end
end)
WB:NewKeybind("Incendia", "", Enum.KeyCode.C, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
                if player.Character then
                    table.insert(players, player.Character)
                end
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
                    if raycastResult.Instance:IsDescendantOf(player.Character) then
                        if player ~= game.Players.LocalPlayer then
                            return player
                        end
                    end
                end
            end
            return nil
        end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then
            return
        end

        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                "Magic",
                {
                    "FireSpell",
                    player.Character
                }
            }
            for _ = 1, 5 do
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
end)
WB:NewKeybind("Pain", "", Enum.KeyCode.G, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
	            end
           	 if x ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                "PainInflict",
                {
                    player.Character
                }
            }
            for _ = 1, 15 do
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
end)
WB:NewKeybind("Ossox", "",Enum.KeyCode.U, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Magic",
                [2] = {
                    [1] = "SnapNeck",
                    [2] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
        end
    end
end)
WB:NewKeybind("Mass Neck Snap", "",Enum.KeyCode.P, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local args = {
        [1] = "Magic",
        [2] = {
        [1] = "SnapAll"
        }
    }
    
    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
WB:NewKeybind("Explode", "",Enum.KeyCode.Y, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = "Magic"
    local A_2 = 
    {
        [1] = "Explosion",
        [2] = Mouse.Hit.p
    }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)
WB:NewKeybind("Fire Circle", "",Enum.KeyCode.Q, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "FireCircle",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))   																		
    end
    end
end)
WB:NewKeybind("Ring Off", "",Enum.KeyCode.K, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "DisableRing",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Ring On", "",Enum.KeyCode.L, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "EnableRing",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)

WB:NewKeybind("Fire Removal", "",Enum.KeyCode.N, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "NoFire",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)
WB:NewKeybind("Heart Rip", "",Enum.KeyCode.B, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
	            end
                 if player ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "TelekineticHeart",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Errox Femus", "",Enum.KeyCode.T, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "BreakLeg",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)
WB:NewKeybind("Sleep Spell", "",Enum.KeyCode.J, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local A_1 = "Magic"
        local A_2 = 
            {
                [1] = "SleepSpell", 
                [2] = player.Character
            }
        local Event = game:GetService("ReplicatedStorage").Events.Witch
        Event:FireServer(A_1, A_2)																	
    end
    end
end)
WB:NewKeybind("Invisibility", "",Enum.KeyCode.V, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Invisibility"
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)


G:NewKeybind("Toggle Gui", "", Enum.KeyCode.Tab, function()
    Library:ToggleUI()
end)
Library1:ToggleUI()
end
